{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-does-the-cpg-library-offer","title":"What does the CPG library offer?","text":"<p>A Code Property Graph (CPG) is a graph-based representation of code which unites several concepts such as an Abstract Syntax Tree (AST), Control Flow Graph (CFG) or Evaluation Order Graph (EOG), Data Flow Graph (DFG) or Control Dependence Graph (CDG), among others, in a single supergraph. This is beneficial because the CPG contains the most relevant information to conduct static program analysis and yet, the graph provides a certain abstraction of the respective programming language.</p> <p></p> <p></p> <p></p>"},{"location":"#supported-languages","title":"Supported Languages","text":"<p>The library supports the following programming languages out of the box:</p> <ul> <li>Java</li> <li>C/C++</li> <li>Go</li> <li>Python</li> <li>TypeScript</li> <li>LLVM-IR</li> </ul> <p>Nothing suitable found? Write your own language frontend   for the respective language.   </p>"},{"location":"#built-in-analyses","title":"Built-in Analyses","text":"<p>The library currently provides different analyses:</p> <ul> <li>Dataflow Analysis</li> <li>Reachability Analysis</li> <li>Constant Propagation</li> <li>Intraprocedural Order Evaluation of Statements   </li> </ul>"},{"location":"#accessing-the-graph","title":"Accessing the Graph","text":"<p>The library can be used by analysts or tools in different ways:</p> <ul> <li>The graph can be exported to the graph database neo4j</li> <li>The CPG can be included into every project as a library</li> <li>We offer an interactive CLI to explore the graph</li> <li>We provide an API for querying the graph for interesting properties   </li> </ul>"},{"location":"#highly-extensible","title":"Highly Extensible","text":"<p>The library is easily extensible. You can add new...</p> <ul> <li>language frontends Tell me more about it!,</li> <li>passes Tell me more about it! or</li> <li>analyses.   </li> </ul>"},{"location":"#handling-incomplete-code","title":"Handling Incomplete Code","text":"<p>The code you have to analyze is missing dependencies, is under active development and might   miss some code fragments?      No problem! Our tooling provides a certain resilience against such problems.   </p>"},{"location":"#about-us","title":"About Us","text":"<p>We're a team of researchers at Fraunhofer AISEC. We're interested in different topics in the area of static program analysis. If you're interested in our work, feel free to reach out to us - we're happy to collaborate and push the boundaries of static code analysis.</p>"},{"location":"#publications","title":"Publications","text":""},{"location":"#2023","title":"2023","text":"<p>AbsIntIO: Towards Showing the Absence of Integer Overflows in Binaries using Abstract Interpretation</p> <p>Alexander K\u00fcchler, Leon Wenning, Florian Wendland</p> <p>In: ACM ASIA Conference on Computer and Communications Security (Asia CCS). Melbourne, VIC, Australia.</p> bibtex <pre><code>@inproceedings{kuechler2023absintio,\n  author={Alexander K\\\"uchler and Leon Wenning, and Florian Wendland},\n  title={AbsIntIO: Towards Showing the Absence of Integer Overflows in Binaries using Abstract Interpretation},\n  year={2023},\n  booktitle={ACM ASIA Conference on Computer and Communications Security},\n  series={Asia CCS '23},\n  doi={10.1145/3579856.3582814},\n  location={Melbourne, VIC, Australia},\n  publisher={ACM}\n}</code></pre> paper"},{"location":"#2022","title":"2022","text":"<p>Representing LLVM-IR in a Code Property Graph</p> <p>Alexander K\u00fcchler, Christian Banse</p> <p>In: 25th Information Security Conference (ISC). Bali, Indonesia.</p> bibtex <pre><code>@inproceedings{kuechler2022representing,\n  author={Alexander K\\\"uchler and Christian Banse},\n  title={Representing LLVM-IR in a Code Property Graph},\n  year={2022},\n  booktitle={25th Information Security Conference},\n  series={ISC},\n  doi={10.1007/978-3-031-22390-7\\_21},\n  location={Bali, Indonesia},\n  publisher={Springer}\n}</code></pre> preprint paper <p>A Language-Independent Analysis Platform for Source Code</p> <p>Konrad Weiss, Christian Banse</p> bibtex <pre><code>@misc{weiss2022a,\n  doi = {10.48550/ARXIV.2203.08424},\n  url = {https://arxiv.org/abs/2203.08424},\n  author = {Weiss, Konrad and Banse, Christian},\n  title = {A Language-Independent Analysis Platform for Source Code},\n  publisher = {arXiv},\n  year = {2022},\n}</code></pre> paper"},{"location":"#2021","title":"2021","text":"<p>Cloud Property Graph: Connecting Cloud Security Assessments with Static Code Analysis</p> <p>Christian Banse, Immanuel Kunz, Angelika Schneider, Konrad Weiss</p> <p>In: 2021 IEEE 14th International Conference on Cloud Computing (CLOUD). Los Alamitos, CA, USA</p> bibtex <pre><code>@inproceedings{banse2021cloudpg,\n  author = {Christian Banse and Immanuel Kunz and Angelika Schneider and Konrad Weiss},\n  booktitle = {2021 IEEE 14th International Conference on Cloud Computing (CLOUD)},\n  title = {Cloud Property Graph: Connecting Cloud Security Assessments with Static Code Analysis},\n  year = {2021},\n  pages = {13-19},\n  doi = {10.1109/CLOUD53861.2021.00014},\n  url = {https://doi.ieeecomputersociety.org/10.1109/CLOUD53861.2021.00014},\n  publisher = {IEEE Computer Society},\n  address = {Los Alamitos, CA, USA},\n  month = {sep}\n}</code></pre> preprint paper"},{"location":"API/","title":"API Reference","text":"<p>We auto-generate an API reference using dokka. The following versions are available:</p> <ul> <li>main</li> <li>v7.0.1</li> </ul>"},{"location":"CPG/impl/","title":"Implementation and Concepts","text":"<p>The translation of source code to the graph consists of two main steps. First, the source code is parsed and transferred to the CPG nodes by a so-called Language Frontend. Then, Passes refine the information which is kept in the graph. These two stages are strictly separated one from each other.</p> <p> </p> <ul> <li>Languages and Language Frontends</li> <li>Scopes</li> <li>Passes</li> </ul>"},{"location":"CPG/impl/language/","title":"Implementation and Concepts: Language and Language Frontends","text":"<p>Even though we are aiming for a language-independent representation of source code, we still need to parse source code depending on the original programming language used. Therefore, we are introduce two concepts that help developers and users to understand how the CPG translates language-specific code into an abstract form. </p>"},{"location":"CPG/impl/language/#language","title":"<code>Language</code>","text":"<p>The first concept is a <code>Language</code>. It represents the programming language as a general concept and contains meta-information about it. This includes:</p> <ul> <li>The name of the language, e.g. C++</li> <li>The delimiter used to separate namespaces, e.g., <code>::</code></li> <li>The <code>LanguageFrontend</code> used to parse it</li> <li>Additional <code>LanguageTrait</code> implementations</li> </ul> <p>Each <code>Node</code> has a <code>language</code> property that specifies its language.</p>"},{"location":"CPG/impl/language/#languagetrait","title":"<code>LanguageTrait</code>","text":"<p>A language trait aims to further categorize a programming language based on conceptual paradigms. This can be easily extended by introducing new interfaces based on <code>LanguageTrait</code>. Examples include:</p> <ul> <li>Are default arguments supported?</li> <li>Does the language have structs or classes?</li> <li>Are function pointers supported?</li> <li>Are templates or generics used in the language?</li> <li>Do we need some special knowledge to resolve symbols, calls, variables?</li> </ul> <p>These traits are used during the pass execution phase to fine-tune things like call resolution or type hierarchies.</p>"},{"location":"CPG/impl/language/#languagefrontend","title":"<code>LanguageFrontend</code>","text":"<p>In contrast to the <code>Language</code> concept, which represents the generic concept of a programming language, a <code>LanguageFrontend</code> is a specific module in the CPG library that does the actual translating of a programming language's source code into our CPG representation.</p> <p>At minimum a language frontend needs to parse the languages' code and translate it to specific CPG nodes. It will probably use some library to retrieve the abstract syntax tree (AST). The frontend will set the nodes' <code>AST</code> edges and establish proper scopes via the scope manager. Everything else, such as call or symbol resolving is optional and will be done by later passes. However, if a language frontend is confident in setting edges, such as <code>REFERS_TO</code>, it is allowed to and this is respected by later passes. However, one must be extremely careful in doing so.</p> <p>The frontend has a limited life-cycle and only exists during the translation phase. Later, during the execution of passes, the language frontend will not exist anymore. Language-specific customization of passes are done using <code>LanguageTraits</code>.</p> <p>To create nodes, a language frontend MUST use the node builder functions in the <code>ExpressionBuilder</code>, <code>DeclarationBuilder</code> or <code>StatementBuilder</code>. These are Kotlin extension functions that automatically inject the context, such as language, scope or code location of a language frontend or its handler into the created nodes.</p>"},{"location":"CPG/impl/language/#supporting-a-new-language","title":"Supporting a new language","text":"<p>To support a new language, all you have to do is to</p> <ul> <li>Provide a new <code>Language</code>. Here, you have to think about the features of the   programming language and which <code>LanguageTraits</code> the respective language has to   implement. With this, you provide the respective fine-tuning to make the   Passes work properly.</li> <li>Implement a new <code>LanguageFrontend</code> which is executed if a file matches the new   <code>Language</code>. The requirements of the frontends are described above.</li> </ul> <p>To make use of the respective frontend by the CPG, you have to configure the translation accordingly. This is done by the <code>TranslationConfiguration</code> where you register your new language by calling one of the <code>registerLanguage()</code> methods. As an example <pre><code>val config: TranslationConfiguration = TranslationConfiguration\n.builder()\n// More configuration\n.registerLanguage(MyNewLanguage()) // Option 1\n.registerLanguage&lt;MyOtherNewLanguage&gt;() // Option 2\n.registerLanguage(\"MyThirdNewLanguage\") // Option 3\n.build()\n</code></pre></p>"},{"location":"CPG/impl/passes/","title":"Implementation and Concepts: Passes","text":""},{"location":"CPG/impl/passes/#what-is-a-pass","title":"What is a Pass?","text":"<p>Passes get a prebuilt CPG that at least contains the CPG-AST and output a modified graph. Their purpose is to extend the syntactic representation of code with additional nodes and edges to represent the semantics of the program. Passes can be executed in sequence, where the output of the previous pass serves as input of the next pass.</p>"},{"location":"CPG/impl/passes/#creating-a-new-pass","title":"Creating a new Pass","text":"<p>The user of the cpg library can implement her own passes. Each pass needs to extend the class <code>Pass</code> and implement its base function<code>accept(result: TranslationResult)</code>. The remaining structure of the pass is free to be designed by the implementer.</p>"},{"location":"CPG/impl/passes/#registering-a-pass","title":"Registering a Pass","text":"<p>A newly created pass has to be registered with the <code>TranslationManager</code> through its builder by calling <pre><code>val configuration = TranslationConfiguration.builder().\n    // ...\n    .registerPass(...)\n</code></pre></p>"},{"location":"CPG/impl/passes/#modifying-a-pass","title":"Modifying a Pass","text":"<p>A preexisting pass can be modified by extending it and overwriting its functions. For this purpose, all member functions of existing library passes have the visibility <code>protected</code>. Depending on the modified pass, internal constructs have to be respected.</p> <p>For example, the <code>EvaluationOrderGraphPass</code> uses an internal handle structure. When extending this pass, it is necessary to add handlers of new Node types to the internal handler map. If a developer needs to override an exisiting handler, the handle has to be implemented with the same signature to use the polymorphism feature. Additionally the mapping of <code>node type -&gt; handler</code> needs to be replaced by a new entry <code>node type -&gt; overridden</code> handler.</p>"},{"location":"CPG/impl/passes/#ordering-passes","title":"Ordering Passes","text":"<p>Passes may depend on the information added by another pass. This requires us to enforce the order in which passes are executed. To do so, we provide the following annotations for the passes:</p> <ul> <li><code>DependsOn(other: KClass&lt;out Pass&gt;, softDependency: Boolean = false)</code> -- The annotated pass is executed after    the other pass(es). If <code>softDependency</code> is set to <code>false</code>, it automatically    registers these passes if they haven't been registered by the user.</li> <li><code>ExecuteBefore(other: KClass&lt;out Pass&gt;, ...)</code> -- The annotated pass is executed    before the other pass(es) specified.</li> <li><code>ExecuteFirst</code> -- The annotated pass is executed as the first pass if possible.</li> <li><code>ExecuteLast</code> -- The annotated pass is executed as the last pass if possible.</li> <li><code>RequiredFrontend(frontend: KClass&lt;out LanguageFrontend&gt;)</code> -- The annotated pass    is only executed if the frontend has been used.</li> </ul>"},{"location":"CPG/impl/scopes/","title":"Implementation and Concepts: Scopes and Scope Manger","text":""},{"location":"CPG/specs/","title":"Specifications","text":"<p>The core of the code property graph are its nodes and edges. Here, you find the links to the specifications of the following concepts:</p> <ul> <li>Explore our Graph Model</li> <li>Data Flow Graph (DFG)</li> <li>Evaluation Order Graph (EOG)</li> </ul>"},{"location":"CPG/specs/dfg/","title":"Specification: Data Flow Graph","text":"<p>The Data Flow Graph (DFG) is built as edges between nodes. Each node has a set of incoming data flows (<code>prevDFG</code>) and outgoing data flows (<code>nextDFG</code>). In the following, we summarize how different types of nodes construct the respective data flows.</p>"},{"location":"CPG/specs/dfg/#callexpression","title":"CallExpression","text":"<p>Interesting fields:</p> <ul> <li><code>invokes: List&lt;FunctionDeclaration&gt;</code>: A list of the functions which are called</li> <li><code>arguments: List&lt;Expression&gt;</code>: The arguments which are used in the function call</li> </ul> <p>A call expressions calls another function. We differentiate two types of call expressions: 1) the called function is implemented in the program (and we can analyze the code) and 2) the called function cannot be analyzed (e.g., this is the case for library/API functions). For the first case, the <code>invokes</code> list contains values, in the second case, the list is empty.</p>"},{"location":"CPG/specs/dfg/#case-1-known-function","title":"Case 1: Known function","text":"<p>For each function in the <code>invokes</code> list, the arguments of the call expression flow to the function's parameters. The value of the function declaration flows to the call.</p> <p>Scheme:   <pre><code>flowchart LR\n  node([CallExpression]) -.- invokes[\"invokes[j]\"];\n  node -.- arguments[\"arguments[i]\"];\n  invokes ==&gt; decl([FunctionDeclaration])\n  decl -.- parameters[\"parameters[i]\"]\n  arguments -- \"for all i: DFG\" --&gt; parameters\n  invokes -- \"forall j: DFG\" --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#case-2-unknown-function","title":"Case 2: Unknown function","text":"<p>The base and all arguments flow to the call expression.</p> <p>Scheme:   <pre><code>flowchart LR\n  arguments[\"arguments[i]\"] -- \"for all i: DFG\" --&gt; node([CallExpression]);\n  base -- DFG --&gt; node;\n  arguments -.- node;\n  node -.- base;</code></pre></p>"},{"location":"CPG/specs/dfg/#castexpression","title":"CastExpression","text":"<p>Interesting fields:</p> <ul> <li><code>expression: Expression</code>: The inner expression which has to be casted</li> </ul> <p>The value of the <code>expression</code> flows to the cast expression. Scheme: <pre><code>  flowchart LR\n    node([CastExpression]) -.- expression;\n    expression -- DFG --&gt; node;</code></pre></p>"},{"location":"CPG/specs/dfg/#binaryoperator","title":"BinaryOperator","text":"<p>Interesting fields:</p> <ul> <li><code>operatorCode: String</code>: String representation of the operator</li> <li><code>lhs: Expression</code>: The left-hand side of the operation</li> <li><code>rhs: Expression</code>: The right-hand side of the operation</li> </ul> <p>We have to differentiate between the operators. We can group them into three categories: 1) Assignment, 2) Assignment with a Computation and 3) Computation.</p>"},{"location":"CPG/specs/dfg/#case-1-assignment-operatorcode","title":"Case 1: Assignment (<code>operatorCode: =</code>)","text":"<p>The <code>rhs</code> flows to <code>lhs</code>. In some languages, it is possible to have an assignment in a subexpression (e.g. <code>a + (b=1)</code>). For this reason, if the assignment's ast parent is not a <code>CompoundStatement</code> (i.e., a block of statements), we also add a DFG edge to the whole operator.</p> <p>Scheme: <pre><code>flowchart LR\n    node([BinaryOperator]) -.- rhs(rhs);\n      rhs -- DFG --&gt; lhs;\n    node([BinaryOperator]) -.- lhs(lhs);\n</code></pre></p> <pre><code>flowchart LR\n  node([BinaryOperator]) -.- lhs(lhs);\n  node([BinaryOperator]) -.- rhs(rhs);\n  rhs -- DFG --&gt; lhs;\n  rhs -- DFG --&gt; node;</code></pre> <pre><code>flowchart LR\n  A[binaryOperator.rhs] -- DFG --&gt; binaryOperator.lhs;\n  subgraph S[If the ast parent is not a CompoundStatement]\n    direction LR\n    binaryOperator.rhs -- DFG --&gt; binaryOperator;\n  end\n  A --&gt; S;</code></pre>"},{"location":"CPG/specs/dfg/#case-2-assignment-with-a-computation-operatorcode-","title":"Case 2: Assignment with a Computation (<code>operatorCode: *=, /=, %=, +=, -=, &lt;&lt;=, &gt;&gt;=, &amp;=, ^=, |=</code> )","text":"<p>The <code>lhs</code> and the <code>rhs</code> flow to the binary operator expression, the binary operator flows to the <code>lhs</code>.</p> <p>Scheme:   <pre><code>flowchart LR\n  node([BinaryOperator]) -.- lhs(lhs);\n  node([BinaryOperator]) -.- rhs(rhs);\n  lhs -- DFG --&gt; node;\n  rhs -- DFG --&gt; node;\n  node == DFG ==&gt; lhs;</code></pre></p> <p>Dangerous: We have to ensure that the first two operations are performed before the last one</p>"},{"location":"CPG/specs/dfg/#case-3-computation","title":"Case 3: Computation","text":"<p>The <code>lhs</code> and the <code>rhs</code> flow to the binary operator expression.</p> <p>Scheme:   <pre><code>flowchart\n  node([BinaryOperator]) -.- lhs(lhs);\n  node([BinaryOperator]) -.- rhs(rhs);\n  rhs -- DFG --&gt; node;\n  lhs -- DFG --&gt; node;</code></pre></p>"},{"location":"CPG/specs/dfg/#arraycreationexpression","title":"ArrayCreationExpression","text":"<p>Interesting fields:</p> <ul> <li><code>initializer: Expression</code>: The initialization values of the array.</li> </ul> <p>The <code>initializer</code> flows to the array creation expression.</p> <p>Scheme:   <pre><code>flowchart LR\n  node([ArrayCreationExpression]) -.- initializer(initializer)\n  initializer -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#newexpression","title":"NewExpression","text":"<p>Interesting fields: * <code>initializer: Expression</code>: The initializer of the expression.</p> <p>The <code>initializer</code> flows to the whole expression.</p> <p>Scheme:   <pre><code>flowchart LR\n  node([NewExpression]) -.- initializer(initializer)\n  initializer -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#arraysubscriptionexpression","title":"ArraySubscriptionExpression","text":"<p>Interesting fields:</p> <ul> <li><code>arrayExpression: Expression</code>: The array which is accessed</li> <li><code>subscriptExpression: Expression</code>: The index which is accessed</li> </ul> <p>The <code>arrayExpression</code> flows to the subscription expression. This means, we do not differentiate between the field which is accessed.</p> <p>Scheme:   <pre><code>flowchart LR\n  arrayExpression -- DFG --&gt; node([ArraySubscriptionExpression]);\n  arrayExpression -.- node;</code></pre></p>"},{"location":"CPG/specs/dfg/#conditionalexpression","title":"ConditionalExpression","text":"<p>Interesting fields:</p> <ul> <li><code>condition: Expression</code>: The condition which is evaluated</li> <li><code>thenExpr: Expression</code>: The expression which is executed if the condition holds</li> <li><code>elseExpr: Expression</code>: The expression which is executed if the condition does not hold</li> </ul> <p>The <code>thenExpr</code> and the <code>elseExpr</code> flow to the <code>ConditionalExpression</code>. This means that implicit data flows are not considered.</p> <p>Scheme:   <code>mermaid   flowchart LR     thenExpr -- DFG --&gt; node([ConditionalExpression]);     thenExpr -.- node;     elseExpr -.- node;     elseExpr -- DFG --&gt; node;</code></p>"},{"location":"CPG/specs/dfg/#declaredreferenceexpression","title":"DeclaredReferenceExpression","text":"<p>Interesting fields:</p> <ul> <li><code>refersTo: Declaration</code>: The declaration e.g. of the variable or symbol</li> <li><code>access: AccessValues</code>: Determines if the value is read from, written to or both</li> </ul> <p>This is the most tricky concept for the DFG edges. We have to differentiate between the DFG edges generated by the <code>DFGPass</code> and the ones generated by the <code>ControlFlowSensitiveDFGPass</code>.</p> <p>The <code>DFGPass</code> generates very simple edges based on the access to the variable as follows:</p> <ul> <li>The value flows from the declaration to the expression for read access. Scheme:   <pre><code>flowchart LR\n  refersTo -- DFG --&gt; node([DeclaredReferenceExpression]);\n  refersTo -.- node;</code></pre></li> <li>For write access, data flow from the expression to the declaration. Scheme:   <pre><code>flowchart LR\n  node([DeclaredReferenceExpression]) -- DFG --&gt; refersTo;\n  node -.- refersTo;</code></pre></li> <li>For readwrite access, both flows are present. Scheme:   <pre><code>flowchart LR\n  refersTo -- DFG 1 --&gt; node([DeclaredReferenceExpression]);\n  refersTo -.- node;\n  node -- DFG 2 --&gt; refersTo;</code></pre></li> </ul> <p>This mostly serves one purpose: The current function pointer resolution requires such flows. Once the respective passes are redesigned, we may want to update this.</p> <p>The <code>ControlFlowSensitiveDFGPass</code> completely changes this behavior and accounts for the data flows which differ depending on the program's control flow (e.g., different assignments to a variable in an if and else branch, ...). The pass performs the following actions:</p> <ul> <li>First, it clears all the edges between a <code>VariableDeclaration</code> and its <code>DeclaredReferenceExpression</code>. Actually, it clears all incoming and outgoing DFG edges of all VariableDeclarations in a function. This includes the initializer but this edge is restored right away. Scheme:   <pre><code>flowchart LR\n  node([VariableDeclaration]) -.- initializer;\n  initializer -- DFG --&gt; node;</code></pre></li> <li>For each read access to a DeclaredReferenceExpression, it collects all potential previous assignments to the variable and adds these to the incoming DFG edges. You can imagine that this is done by traversing the EOG backwards until finding the first assignment to the variable for each possible path. Scheme:   <pre><code>flowchart LR\n  node([DeclaredReferenceExpression]) -.- refersTo;\n  A == last write to ==&gt; refersTo;\n  A[/Node/] -- DFG --&gt; node;</code></pre></li> <li>If we increment or decrement a variable with \"++\" or \"--\", the data of this statement flows from the previous writes of the variable to the input of the statement (= the DeclaredReferenceExpression). We write back to this reference and consider the lhs as a \"write\" to the variable! Attention: This potentially adds loops and can look like a branch. Needs to be handled with care in subsequent passes/analyses! Scheme:   <pre><code>flowchart LR\n  node([UnaryOperator]) -.- input;\n  input -.- |\"(optional)\"| refersTo;\n  W -- DFG 1 --&gt; input;\n  W[/Node/] == last write to ==&gt; refersTo;\n  input -- DFG 2 --&gt; node;\n  node -- DFG 3 --&gt; input;\n  input -- DFG 4 --&gt; R[/Node/];\n  R == next read of ==&gt; refersTo;</code></pre></li> <li>For compound operators such as <code>+=, -=, *=, /=</code>, we have an incoming flow from the last writes to reference on the left hand side of the expression to the lhs. The lhs then flows to the whole expression. Also, the right hand side flows to the whole expression (if it's a read, this is processed separately). The data flows back to the lhs which is marked as the last write to the variable. Attention: This potentially adds loops and can look like a branch. Needs to be handled with care in subsequent passes/analyses! <pre><code>flowchart LR\n  node -.- rhs;\n  node -.- lhs;\n  lhs -.- refersTo;\n  W -- DFG 1 --&gt; lhs;\n  W[/Node/] == last write to ==&gt; refersTo;\n  rhs -- DFG 2 --&gt; node;\n  lhs -- DFG 4 --&gt; R;\n  lhs -- DFG 2 --&gt; node([BinaryOperator]);\n  node -- DFG 3 --&gt; lhs;\n  R[/Node/] == next read of ==&gt; refersTo;</code></pre></li> <li>If the variable is assigned a value (a binary operator <code>var = rhs</code>), the right hand side flows to the variable. This is considered as a write operation.   <pre><code>flowchart LR\n  node -.- rhs;\n  node -.- lhs;\n  lhs -.- refersTo;\n  lhs -- DFG 2 --&gt; node([BinaryOperator]);\n  R[/Node/] == next read of ==&gt; refersTo;\n  rhs -- DFG --&gt; lhs;\n  lhs -- DFG --&gt; refersTo</code></pre></li> </ul>"},{"location":"CPG/specs/dfg/#memberexpression","title":"MemberExpression","text":"<p>Interesting fields:</p> <ul> <li><code>base: Expression</code>: The base object whose field is accessed</li> <li><code>refersTo: Declaration?</code>: The field it refers to. If the class is not implemented in the code under analysis, it is <code>null</code>.</li> </ul> <p>The MemberExpression represents an access to an object's field and extends a DeclaredReferenceExpression with a <code>base</code>.</p> <p>If an implementation of the respective class is available, we handle it like a normal DeclaredReferenceExpression. If the <code>refersTo</code> field is <code>null</code> (i.e., the implementation is not available), base flows to the expression.</p>"},{"location":"CPG/specs/dfg/#expressionlist","title":"ExpressionList","text":"<p>Interesting fields:</p> <ul> <li><code>expressions: List&lt;Statement&gt;</code></li> </ul> <p>The data of the last statement in <code>expressions</code> flows to the expression.</p>"},{"location":"CPG/specs/dfg/#initializerlistexpression","title":"InitializerListExpression","text":"<p>Interesting fields:</p> <ul> <li><code>initializers: List&lt;Expression&gt;</code>: The list of expressions which initialize the values.</li> </ul> <p>The data of all initializers flow to this expression.</p> <p>Scheme: <pre><code>  flowchart LR\n    inits[\"for all i: initializers[i]\"] -- DFG --&gt; node([InitializerListExpression]);\n    node -.- inits;</code></pre></p>"},{"location":"CPG/specs/dfg/#keyvalueexpression","title":"KeyValueExpression","text":"<p>Interesting fields:</p> <ul> <li><code>value: Expression</code>: The value which is assigned.</li> </ul> <p>The value flows to this expression.</p> <p>Scheme: <pre><code>  flowchart LR\n    value -- DFG --&gt; node([KeyValueExpression]);\n    value -.- node;</code></pre></p>"},{"location":"CPG/specs/dfg/#lambdaexpression","title":"LambdaExpression","text":"<p>Interesting fields:</p> <ul> <li><code>function: FunctionDeclaration</code>: The usage of a lambda</li> </ul> <p>The data flow from the function representing the lambda to the expression.</p> <p>Scheme: <pre><code>  flowchart LR\n    function -- DFG --&gt; node([LambdaExpression]);\n    function -.- node;</code></pre></p>"},{"location":"CPG/specs/dfg/#unaryoperator","title":"UnaryOperator","text":"<p>Interesting fields:</p> <ul> <li><code>input: Expression</code>: The inner expression</li> <li><code>operatorCode: String</code>: A string representation of the operation</li> </ul> <p>The data flow from the input to this node and, in case of the operatorCodes ++ and -- also back from the node to the input.</p> <pre><code>  flowchart TD\n    node1([UnaryOperator]) -.- operator\n    operator ==&gt; cmp\n\n    cmp == \"operator == '++' ||\n     operator == '--'\" ==&gt; incdec;\n\n    cmp == \"operator != '++' &amp;&amp;\n     operator != '--'\" ==&gt; finish[ ];\n\n    subgraph finish[ ]\n      node2([UnaryOperator]) -.- input2;\n      input2 -.- |\"(optional)\"| refersTo2;\n      W2[/Node/] == last write to ==&gt; refersTo2;\n      W2 -- DFG 1 --&gt; input2[input];\n      input2 -- DFG 2 --&gt; node2;\n    end\n\n    subgraph incdec[ ]\n      node([UnaryOperator]) -.- input;\n      input -.- |\"(optional)\"| refersTo;\n      W[/Node/] == last write to ==&gt; refersTo;\n      W -- DFG 1 --&gt; input;\n      input -- DFG 2 --&gt; node;\n      node -- DFG 3 --&gt; input;\n      input -- DFG 4 --&gt; R[/Node/];\n      R == next read of ==&gt; refersTo;\n    end</code></pre> <p>Dangerous: We have to ensure that the first operation is performed before the last one (if applicable)</p>"},{"location":"CPG/specs/dfg/#returnstatement","title":"ReturnStatement","text":"<p>Interesting fields:</p> <ul> <li><code>returnValue: Expression</code>: The value which is returned</li> </ul> <p>The return value flows to the whole statement.</p> <p>Scheme: <pre><code>  flowchart LR\n    returnValue -- DFG --&gt; node([ReturnStatement]);\n    returnValue -.- node;</code></pre></p>"},{"location":"CPG/specs/dfg/#branching-statements","title":"Branching Statements","text":"<p>Specific statements lead to a branch in the control flow of a program. A value that influences the branching decision can lead to an implicit data flow via the branching and we therefore draw a dfg edge from the condition, to the branching node.</p>"},{"location":"CPG/specs/dfg/#foreachstatement","title":"ForEachStatement","text":"<p>Interesting fields:</p> <ul> <li><code>variable: Statement</code>: The statement which is used in each iteration to assign the current iteration value.</li> <li><code>iterable: Statement</code>: The statement or expression, which is iterated</li> </ul> <p>The value of the iterable flow to the <code>VariableDeclaration</code> in the <code>variable</code>. Since some languages allow arbitrary logic, we differentiate between two cases:</p>"},{"location":"CPG/specs/dfg/#case-1-the-variable-is-a-declarationstatement","title":"Case 1. The <code>variable</code> is a <code>DeclarationStatement</code>.","text":"<p>This is the case for most languages where we can have only a variable in this place (e.g., <code>for(e in list)</code>). Here, we get the declaration(s) in the statement and add the DFG from the iterable to this declaration.</p> <p>Scheme: <pre><code>  flowchart LR\n    node([ForEachStatement]) -.- variable[variable: DeclarationStatement]\n    node -.- iterable[iterable]\n    variable -.- declarations[\"declarations[i]\"]\n    iterable -- for all i: DFG --&gt; declarations</code></pre></p>"},{"location":"CPG/specs/dfg/#case-2-the-variable-is-another-type-of-statement","title":"Case 2. The <code>variable</code> is another type of <code>Statement</code>.","text":"<p>In this case, we assume that the last VariableDeclaration is the one used for looping. We add a DFG edge only to this declaration.</p> <p>Scheme: <pre><code>  flowchart LR\n    node([ForEachStatement]) -.- statement[variable]\n    node -.- iterable[iterable]\n    statement -.- localVars[variables]\n    localVars -. \"last\" .-&gt; variable\n    iterable -- DFG --&gt; variable\n    variable -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#dostatement","title":"DoStatement","text":"<p>Interesting fields: * <code>condition: Statement</code>: The condition that is evaluated before making the branching decision</p> <p>Scheme: <pre><code>  flowchart LR\n    node([DoStatement]) -.- condition(condition)\n    condition -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#whilestatement","title":"WhileStatement","text":"<p>Interesting fields: * <code>condition: Statement</code>: The condition that is evaluated before making the branching decision * <code>conditionDeclaration: Statement</code>: A declaration containing the condition in the initializer, used instead of the condition</p> <p>Scheme: <pre><code>  flowchart LR\n    node([WhileStatement]) -.- condition(condition)\n    node -.- conditionDeclaration(conditionDeclaration)\n    condition -- DFG --&gt; node\n    conditionDeclaration  -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#forstatement","title":"ForStatement","text":"<p>Interesting fields: * <code>condition: Statement</code>: The condition that is evaluated before making the branching decision * <code>conditionDeclaration: Statement</code>: A declaration containing the condition in the initializer, used instead of the condition.</p> <p>Scheme: <pre><code>  flowchart LR\n    node([ForStatement]) -.- condition(condition)\n    node -.- conditionDeclaration(conditionDeclaration)\n    condition -- DFG --&gt; node\n    conditionDeclaration  -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#ifstatement","title":"IfStatement","text":"<p>Interesting fields: * <code>condition: Statement</code>: The condition that is evaluated before making the branching decision * <code>conditionDeclaration: Statement</code>: A declaration containing the condition in the initialize, used instead of the condition.</p> <p>Scheme: <pre><code>  flowchart LR\n    node([IfStatement]) -.- condition(condition)\n    node -.- conditionDeclaration(conditionDeclaration)\n    condition -- DFG --&gt; node\n    conditionDeclaration  -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#switchstatement","title":"SwitchStatement","text":"<p>Interesting fields: * <code>selector: Statement</code>: The expression that is evaluated before making the branching decision * <code>selectorDeclaration: Statement</code>: A declaration containing the selector in the initializer, used instead of the selector.</p> <p>Scheme: <pre><code>  flowchart LR\n    node([SwitchStatement]) -.- selector(selector)\n    node -.- selectorDeclaration(selectorDeclaration)\n    selector -- DFG --&gt; node\n    selectorDeclaration  -- DFG --&gt; node</code></pre></p>"},{"location":"CPG/specs/dfg/#functiondeclaration","title":"FunctionDeclaration","text":"<p>Interesting fields:</p> <ul> <li><code>body: Expression</code>: The body (i.e., all statements) of the function implementation</li> </ul> <p>The values of all return expressions in the body flow to the function declaration.</p> <p>Scheme: <pre><code>  flowchart LR\n    returns -- DFG --&gt; node([FunctionDeclaration]);\n    body -.- node;\n    body -.- |in all statements| returns[\"returns: ReturnStatement\"]</code></pre></p>"},{"location":"CPG/specs/dfg/#fielddeclaration","title":"FieldDeclaration","text":"<p>Interesting fields:</p> <ul> <li><code>initializer: Expression?</code>: The value which is used to initialize a field (if applicable).</li> </ul> <p>The value of the initializer flows to the whole field.</p> <p>In addition, all writes to a reference to the field (via a <code>DeclaredReferenceExpression</code>) flow to the field, for all reads, data flow to the reference.</p> <p>Scheme: <pre><code>  flowchart LR\n    initializer -- DFG --&gt; node([FieldDeclaration]);\n    initializer -.- node;\n    node -- DFG --&gt; R[/Node/];\n    R == next read of ==&gt; node;</code></pre></p>"},{"location":"CPG/specs/dfg/#variabledeclaration","title":"VariableDeclaration","text":"<p>Interesting fields:</p> <ul> <li><code>initializer: Expression?</code>: The value which is used to initialize a variable (if applicable).</li> </ul> <p>The value of the initializer flows to the variable declaration. The value of the variable declarations flows to all <code>DeclaredReferenceExpressions</code> which read the value before the value of the variable is written to through another reference to the variable.</p> <p>Scheme: <pre><code>  flowchart LR\n    initializer -- DFG --&gt; node([VariableDeclaration]);\n    initializer -.- node;\n    node -- DFG --&gt; R[/Node/];\n    R == next read of ==&gt; node;</code></pre></p>"},{"location":"CPG/specs/dfg/#assignment","title":"Assignment","text":"<p>Interesting fields:</p> <ul> <li><code>value: Expression</code>: The rhs of the assignment</li> <li><code>target: AssignmentTarget</code>: The lhs of the assignment</li> </ul> <p>This should already be covered by the declarations and binary operator \"=\". If not, the <code>value</code> flows to the <code>target</code></p> <p>Scheme: <pre><code>  flowchart LR\n    value -.- node([Assignment]);\n    target -.- node;\n    value -- DFG --&gt; target;</code></pre></p>"},{"location":"CPG/specs/eog/","title":"Specification: Evaluation Order Graph","text":"<p>The Evaluation Order Graph (EOG) is built as edges between AST nodes after the initial translation of the code to the CPG. Its purpose is to follow the order in which code is executed, similar to a CFG, and additionally differentiate on a finer level of granularity in which order expressions and subexpressions are evaluated. Every node points to a set of previously evaluated nodes (<code>prevEOG</code>) and nodes that are evaluated after (<code>nextEOG</code>). The EOG edges are intraprocedural and thus differentiate from INVOKES edges. In the following, we summarize in which order the root node representing a language construct and its descendants in the AST tree are connected.</p> <p>An EOG always starts at root node representing a method/function or record that holds executable code and ends in the node representing the corresponding code or multiple return statements. An implicit return statement with a code location of (-1,-1) is used if the actual source code does not have an explicit return statement.</p> <p>A distinct EOG is drawn for any declared component that can contain code, currently: <code>NamespaceDeclaration</code>, <code>TranslationUnitDeclaration</code>, <code>RecordDeclaration</code> and any subclass of <code>FunctionDeclaration</code>.</p> <p>The EOG is similar to a CFG which connects basic blocks of statements, but there are some subtle differences:</p> <ul> <li>For methods without explicit return statement, the EOG will have an edge to a virtual return node  with line number -1 which does not exist in the original code.    A CFG will always end with the last reachable statement(s) and not insert any virtual return statements.</li> <li>The EOG considers an opening blocking (<code>CompoundStatement</code>, indicated by a <code>{</code>) as a separate node.   A CFG will rather use the first actual executable statement within the block.</li> <li>For IF statements, the EOG treats the <code>if</code> keyword and the condition as separate nodes.   A CFG treats this as one <code>if</code> statement.</li> <li>The EOG considers a method header as a node.   A CFG will consider the first executable statement of the methods as a node.</li> </ul>"},{"location":"CPG/specs/eog/#general-structure","title":"General Structure","text":"<p>The graphs in this specification abstract the representation of the handled graph, to formally specify how EOG edges are drawn between a parent node and the subgraphs rooted by its children. Therefore, a collection of AST children are represented as abstract nodes showing the multiplicity of the node with an indicator (n), in case of sets, or as several nodes showing how the position in a list can impact the construction of an EOG, e.g., nodes (i - 1) to i. The EOG is constructed as postorder of the AST traversal. When building the EOG for the expression a + b, the entire expression is considered evaluated after the subexpression a and the subexpression b is evaluated, therefore EOG edges connect nodes of (a) and (b) before reaching the parent node (+).</p> <p>Note: Nodes describing the titled programing construct will be drawn round, while the rectangular nodes represent their abstract children, that can be atomic leaf nodes or deep AST subtrees. EOG edges to these abstract nodes always mean that a subtree expansion would be necessary to connect the target of the EOG edge to the right node in the subtree.</p> <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; lhs\n  node --EOG--&gt; next:::outer\n  node([+]) -.-&gt; lhs[\"a\"]\n  node -.-&gt; rhs[\"b\"]\n  lhs --EOG--&gt; rhs\n  rhs --EOG--&gt; node</code></pre> <p>Whether a subgraph (a) or (b) is connected first, depends on the exact construct and sometimes the language that is translated into a CPG. Note that, in the following graphics we will often draw an EOG edge to an abstract child node of a language construct that is an AST subtree. The EOG path through that subtree will depend on the node types of that tree and mostly start connecting one of the AST leaf nodes.</p>"},{"location":"CPG/specs/eog/#functiondeclaration","title":"FunctionDeclaration","text":"<p>A function declaration is the start of an intraprocedural EOG and contains its end. Therefore there is no incoming or outgoing edge to <code>previous</code> or <code>next</code> eog nodes that are not in its AST subtree. The EOG connects the code body, as well as the default values of parameters if they exist.</p> <p>Interesting fields:</p> <ul> <li><code>parameters: List&lt;ParamVariableDeclaration&gt;</code>: The parameters of the function.</li> <li><code>defaultValue: Expression</code>: Optional default values of the parameters that have to be evaluated before executing the function's body.</li> <li><code>body: Statement</code>: One or multiple statements executed when this function is called.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  parent([\"FunctionDeclaration\"]) --EOG--&gt;child1[\"defaultValue(i-1)\"]\n  child1 --EOG--&gt;child2[\"defaultValue(i)\"]\n  child2  --EOG--&gt; body\n  parent -.-&gt; body\n  parent -.\"parameters(n)\".-&gt;child3[\"parameter(i-1)\"] -.-&gt;child1 \n  parent -.\"parameters(n)\".-&gt;child4[\"parameter(i)\"] -.-&gt;child2</code></pre></p>"},{"location":"CPG/specs/eog/#statementholder","title":"StatementHolder","text":"<p>StatementHolder is an interface for any node that is not a function and contains code that should be connected with an EOG. The following classes implement this interface: <code>NamespaceDeclaration</code>, <code>TranslationUnitDeclaration</code>, <code>RecordDeclaration</code> and <code>CompoundStatement</code>. The Node implementing the interface is the start of one or multiple EOGs. Note that code inside such a holder can be static or non static (bound to an instance of a record). Therefore, two separate EOGs may be built. </p> <p>Interesting fields:</p> <ul> <li><code>statements: List&lt;Statement&gt;</code>: The code inside a holder. The individual elements are distinguished by a property marking them as <code>staticBlock</code> if they are a <code>CompoundStatement</code>.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  holder([StatementHolder])-.\"statements(n)\".-&gt;sblock1[\"StaticStatement(i-1)\"]\n  holder([StatementHolder])-.\"statements(n)\".-&gt;sblock2[\"StaticStatement(i)\"]\n  holder-.\"statements(n)\".-&gt;nblock1[\"NonStaticStatement(i-1)\"]\n  holder-.\"statements(n)\".-&gt;nblock2[\"NonStaticStatement(i)\"]\n  holder--EOG--&gt;sblock1\n  sblock1--EOG--&gt;sblock2\n  holder--EOG--&gt;nblock1\n  nblock1--EOG--&gt;nblock2</code></pre></p>"},{"location":"CPG/specs/eog/#variabledeclaration","title":"VariableDeclaration","text":"<p>Represents the declaration of a local variable.</p> <p>Interesting fields:</p> <ul> <li><code>initializer: Expression</code>: The result of evaluation will initialize the variable.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  parent([\"VariableDeclaration\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child[\"initializer\"]\n  child --EOG--&gt; parent\n</code></pre></p>"},{"location":"CPG/specs/eog/#callexpression","title":"CallExpression","text":"<p>Represents any type of call in a program.</p> <p>Interesting fields:</p> <ul> <li><code>callee: Expression</code>: The expression declaring the target of a call. This can be a base in a <code>MemberCallExpression</code> or a function pointer in a <code>CallExpression</code>or a reference.</li> <li><code>arguments: List&lt;Expression&gt;</code>: Mapped to the parameters of the call target but evaluated before the call happens.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"callee\"]\n  parent([\"CallExpression\"]) --EOG--&gt; next:::outer\n  child --EOG--&gt; arg1[\"Argument(i-1)\"]\n  arg1--EOG--&gt; arg2[\"Argument(i)\"]\n  arg2[\"Argument(i)\"] --EOG--&gt; parent\n  parent -.-&gt; child\n  parent -.\"arguments(n)\".-&gt; arg1\n  parent -.\"arguments(n)\".-&gt; arg2</code></pre></p>"},{"location":"CPG/specs/eog/#memberexpression","title":"MemberExpression","text":"<p>Access to the field in a <code>RecordDeclaration</code>.</p> <p>Interesting fields:</p> <ul> <li><code>base: Expression</code>: The base evaluated to determine whose field we want to access.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  parent([\"MemberExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child[\"base\"]\n  child --EOG--&gt; parent</code></pre></p>"},{"location":"CPG/specs/eog/#arraysubscriptionexpression","title":"ArraySubscriptionExpression","text":"<p>Array access in the form of <code>arrayExpression[subscriptExpression]</code>.</p> <p>Interesting fields:</p> <ul> <li><code>arrayExpression: Expression</code>: The array to be accessed.</li> <li><code>subscriptExpression: Expression</code>: The index in the array.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  child --EOG--&gt; child2[\"subscriptExpression\"]\n  parent([\"ArraySubscriptionExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child[\"arrayExpression\"]\n  parent -.-&gt; child2\n  child2 --EOG--&gt; parent</code></pre></p>"},{"location":"CPG/specs/eog/#arraycreationexpression","title":"ArrayCreationExpression","text":"<p>Interesting fields:</p> <ul> <li><code>dimensions: List&lt;Expression&gt;</code>: Multiple expressions that define the array's dimensions.</li> <li><code>initializer: Expression</code>: The expression for array initialization.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"dimension(i-1)\"]\n  child1 --EOG--&gt; child2[\"dimension(i)\"]\n  child2 --EOG--&gt; initializer\n  parent([\"ArrayCreationExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child1\n  parent -.-&gt; child2\n  parent -.-&gt; initializer\n  initializer --EOG--&gt; parent</code></pre></p>"},{"location":"CPG/specs/eog/#keyvalueexpression","title":"KeyValueExpression","text":"<p>Represents a key / value pair that could be used in associative arrays, among others.</p> <p>Interesting fields:</p> <ul> <li><code>key: Expression</code>: The key used for later accessing this pair.</li> <li><code>value: Expression</code>: The value of the pair.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  child --EOG--&gt; child2[\"value\"]\n  parent([\"KeyValueExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child[\"key\"]\n  parent -.-&gt; child2\n  child2 --EOG--&gt; parent</code></pre></p>"},{"location":"CPG/specs/eog/#declarationstatement","title":"DeclarationStatement","text":"<p>Here, the EOG is only drawn to the child component if that component is a VariableDeclaration, not if it is a FunctionDeclaration.</p> <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  parent([\"DeclarationStatement\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child([\"VariableDeclaration\"])\n  child --EOG--&gt; parent\n</code></pre>"},{"location":"CPG/specs/eog/#returnstatement","title":"ReturnStatement","text":"<p>This forms the end of an EOG as this is the last statement to be executed in the function.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child\n  child[\"returnValue\"] --EOG--&gt; parent([\"ReturnStatement\"])\n  parent -.-&gt; child</code></pre></p>"},{"location":"CPG/specs/eog/#binaryoperator","title":"BinaryOperator","text":"<p>Interesting fields:</p> <ul> <li><code>lhs: Expression</code>: Left hand side of a binary operation.</li> <li><code>rhs: Expression</code>: Right hand side of a binary operation.</li> <li><code>operatorCode: String</code>: The operation.</li> </ul> <p>We differentiate between two cases based on the <code>operatorCode</code>.</p>"},{"location":"CPG/specs/eog/#short-circuit-evaluation","title":"Short-circuit evaluation","text":"<p>The operations <code>&amp;&amp;</code> and <code>||</code> have a short-circuit evaluation. This means that the expression can terminate early if the <code>lhs</code> is false (for <code>&amp;&amp;</code>) or <code>true</code> (for <code>||</code>). This affects the EOG by adding an EOG edge from <code>lhs</code> to the BinaryOperator.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; lhs\n  node --EOG--&gt; next:::outer\n  node([BinaryOperator]) -.-&gt; lhs\n  node -.-&gt; rhs\n  lhs --EOG--&gt; rhs\n  lhs --EOG--&gt; node\n  rhs --EOG--&gt; node</code></pre></p>"},{"location":"CPG/specs/eog/#default-case","title":"Default case","text":"<p>For the other binary operations like <code>+</code>, <code>-</code> but also assignments <code>=</code> and <code>+=</code> we follow the left before right order. The <code>lhs</code> is evaluated before the <code>rhs</code> as we assume left to right evaluation.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; lhs\n  node --EOG--&gt; next:::outer\n  node([BinaryOperator]) -.-&gt; lhs\n  node -.-&gt; rhs\n  lhs --EOG--&gt; rhs\n  rhs --EOG--&gt; node</code></pre></p>"},{"location":"CPG/specs/eog/#compoundstatement","title":"CompoundStatement","text":"<p>Represents an explicit block of statements.</p> <p>Interesting fields:</p> <ul> <li><code>statements:List&lt;Statement&gt;</code>: Statements in a block of code that are evaluated sequentially.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"statement(i-1)\"]\n  child1 --EOG--&gt;child2[\"statement(i)\"]\n  parent([\"CompoundStatement\"]) --EOG--&gt; next:::outer\n  parent -.\"statements(n)\".-&gt; child1\n  parent -.\"statements(n)\".-&gt; child2\n  child2 --EOG--&gt; parent\n</code></pre></p>"},{"location":"CPG/specs/eog/#unaryoperator","title":"UnaryOperator","text":"<p>For unary operations like <code>!</code> but also writing operations: <code>++</code> and <code>--</code>.</p> <p>Interesting fields:</p> <ul> <li><code>input:Expression</code>: Wrapped by the unary operation.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"input\"]\n  child --EOG--&gt;parent\n  parent([\"UnaryOperator\"]) --EOG--&gt; next:::outer\n  parent -.\"statements(n)\".-&gt; child\n</code></pre></p>"},{"location":"CPG/specs/eog/#unaryoperator-for-exception-throws","title":"UnaryOperator for exception throws","text":"<p>Throwing of exceptions is modelled as unary operation. The EOG continues at an exception catching structure or a function that does a re-throw. </p> <p>Interesting fields: * <code>input: Expression</code>: Exception to be thrown for exception handling.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"input\"]\n  child --EOG--&gt;parent\n  parent([\"throw\"]) --EOG--&gt; catchingContext:::outer\n  parent -.\"statements(n)\".-&gt; child\n</code></pre></p>"},{"location":"CPG/specs/eog/#assertstatement","title":"AssertStatement","text":"<p>Statement that evaluates a condition and if the condition is false, evaluates a message, this message is generalized to a <code>Statement</code> to hold everything  from a single String, to an Exception construction.</p> <p>Interesting fields:</p> <ul> <li><code>condition: Expression</code> Its evaluation leads to evaluation of message and EOG termination or to the regular evaluation of the parent <code>AssertStatement</code>.</li> <li><code>message: Statement</code>: A String message or Exception evaluated only if the assertion fails. </li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"condition\"]\n  child1 --\"EOG:false\"--&gt;child2[\"message\"]\n  child1 --\"EOG:true\"--&gt;parent\n  parent([AssertStatement]) --EOG--&gt; next:::outer\n  parent -.-&gt; child1\n  parent -.-&gt; child2\n</code></pre></p>"},{"location":"CPG/specs/eog/#trystatement","title":"TryStatement","text":"<p>After the execution of the statement the control flow only proceeds with the next statement if all exceptions were handled. If not, execution is relayed to the next outer exception handling context.</p> <p>Interesting fields:</p> <ul> <li><code>resources:List&lt;Statement&gt;</code>: Initialization of values needed in the block or special objects needing cleanup.</li> <li><code>tryBlock:CompoundStatement</code>: The code that should be tried, exceptions inside lead to an eog edge to the catch clauses.</li> <li><code>finallyBlock:CompoundStatement</code>: All EOG paths inside the <code>tryBlock</code> or the <code>catch</code> blocks will finally reach this block and evaluate it.</li> <li><code>catchBlocks:List&lt;CompoundStatementt&gt;</code>: Children of <code>CatchClause</code> (omitted here), evaluated when the exception matches the clauses condition.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer -- EOG --&gt; resource[\"resource(i-1)\"];\n  resource -.- parent\n  resource -- EOG --&gt; resourceI[\"resource(i)\"]\n  resourceI -.- parent\n  resourceI -- EOG --&gt; try[\"tryBlock\"]\n  try -.- parent\n  throws:::outer -- EOG --&gt; catch[\"catchBlock(i)\"]\n  try -- EOG --&gt; finally[\"finallyBlock\"]\n  parent([TryStatement]) --EOG--&gt; next:::outer\n  parent --EOG--&gt; catchingContext:::outer\n  catch -- EOG --&gt; finally\n  finally -- EOG --&gt; parent\n  finally -.- parent\n  catch -.- parent</code></pre></p>"},{"location":"CPG/specs/eog/#continuestatement","title":"ContinueStatement","text":"<p>The execution continues at the <code>condition</code> of a node associated to a <code>Continuable</code> scope, e.g. <code>WhileStatement</code>. This is not necessarily the closest enclosing node of this type, the <code>ContinueStatement</code> may contain a label specifying the exact outer node.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; parent\n  parent([\"ContinueStatement\"]) --EOG--&gt; conditionInContinuableContext:::outer\n</code></pre></p>"},{"location":"CPG/specs/eog/#breakstatement","title":"BreakStatement","text":"<p>The execution continues after a node associated to a <code>Breakable</code> scope, e.g. <code>WhileStatement</code>or <code>SwitchStatement</code>. This is not necessarily the closest enclosing node of this type, the <code>BreakStatement</code> may contain a label specifying the exact outer node.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; parent\n  parent([\"BreakStatement\"]) --EOG--&gt; nextAfterBreakableContext:::outer</code></pre></p>"},{"location":"CPG/specs/eog/#deleteexpression","title":"DeleteExpression","text":"<p>Deletion of a specific object freeing memory or calling the destructor.</p> <p>Interesting fields:</p> <ul> <li><code>operand: Expression</code>: The result of the evaluation is the object to be deleted.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"operand\"]\n  child --EOG--&gt; parent\n  parent([\"DeleteExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child</code></pre></p>"},{"location":"CPG/specs/eog/#labelstatement","title":"LabelStatement","text":"<p>The <code>LabelStatement</code> itself is not added to the EOG. EOG construction is directly forwarded to the labeled statement in the <code>subStatement</code>.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"subStatement\"]\n  child --EOG--&gt; next:::outer\n  parent([\"LabelStatement\"]) -.-&gt; child</code></pre></p>"},{"location":"CPG/specs/eog/#gotostatement","title":"GotoStatement","text":"<p>Models a <code>goto</code>statement and an EOG-Edge is created to the appropriate <code>LabelStatement</code>.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child([\"GotoStatement\"])\n  child --EOG--&gt; labeledStatement:::outer</code></pre></p>"},{"location":"CPG/specs/eog/#newexpression","title":"NewExpression","text":"<p>Creates a new object, which is either an array or an instantiation of a <code>RecordDeclaration</code>. The initializer has to be evaluated to create the object.</p> <p>Interesting fields:</p> <ul> <li> <p><code>initializer: Expression</code>: To be evaluated before creating a new object.</p> </li> <li> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"initializer\"]\n  child --EOG--&gt; parent\n  parent([\"NewExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child</code></pre></p> </li> </ul>"},{"location":"CPG/specs/eog/#castexpression","title":"CastExpression","text":"<p>Interesting fields:</p> <ul> <li><code>expression: Expression</code>: An expression of a specific compile time type, cast to a specified other compile time type.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"expression\"]\n  child --EOG--&gt; parent\n  parent([\"CastExpression\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child</code></pre></p>"},{"location":"CPG/specs/eog/#expressionlist","title":"ExpressionList","text":"<p>List of several expressions that aer evaluated sequentially. The resulting value is the last evaluated expression.</p> <p>Interesting fields:</p> <ul> <li><code>expressions: List&lt;Expression&gt;</code>: Several expressions in sequential order.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"expression(i-1)\"]\n  child1 --EOG--&gt; child2[\"expression(i)\"]\n  child2 --EOG--&gt; parent\n  parent([\"ExpressionList\"]) --EOG--&gt; next:::outer\n  parent -.\"expressions(n)\".-&gt; child1\n  parent -.\"expressions(n)\".-&gt; child2</code></pre></p>"},{"location":"CPG/specs/eog/#initializerlistexpression","title":"InitializerListExpression","text":"<p>This expression initializes multiple variables or an object of multiple elements, e.g. arrays, lists.</p> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"initializer(i-1)\"]\n  child1 --EOG--&gt; child2[\"initializer(i)\"]\n  child2 --EOG--&gt; parent\n  parent([\"InitializerListExpression\"]) --EOG--&gt; next:::outer\n  parent -.\"initializers(n)\".-&gt; child1\n  parent -.\"initializers(n)\".-&gt; child2</code></pre></p>"},{"location":"CPG/specs/eog/#constructexpression","title":"ConstructExpression","text":"<p>A ConstructExpression creates an object.</p> <p>Interesting fields:</p> <ul> <li><code>arguments: List&lt;Expression&gt;</code>: Arguments to the construction, e.g. arguments for a call to a constructor.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"argument(i-1)\"]\n  child1 --EOG--&gt; child2[\"argument(i)\"]\n  child2 --EOG--&gt; parent\n  parent([\"ConstructExpression\"]) --EOG--&gt; next:::outer\n  parent -.\"arguments(n)\".-&gt; child1\n  parent -.\"arguments(n)\".-&gt; child2</code></pre></p>"},{"location":"CPG/specs/eog/#synchronizedstatement","title":"SynchronizedStatement","text":"<p>The placement of the root node between expression and executed block is such that algorithms can be evaluated the expression and then encountering the information that this expression is used for synchronization.</p> <p>Interesting fields:</p> <ul> <li><code>expression: Expression</code>: Its evaluation returns an object that acts as a lock for synchronization.</li> <li><code>blockStatement: CompoundStatement</code>: Code executed while the object evaluated from <code>expression</code> is locked.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"expression\"]\n  child1 --EOG--&gt; parent\n  parent --EOG--&gt; child2[\"blockStatement\"]\n  child2 --EOG--&gt; next:::outer\n  parent -.-&gt; child1\n  parent -.-&gt; child2</code></pre></p>"},{"location":"CPG/specs/eog/#conditionalexpression","title":"ConditionalExpression","text":"<p>A conditional evaluation of two expression, realizing the branching pattern of an <code>IfStatement</code> on the expression level.</p> <p>Interesting fields:</p> <ul> <li><code>condition:Expression</code>: Executed first to decide the branch of evaluation.</li> <li><code>thenExpr:Expression</code>: Evaluated if <code>condition</code> evaluates to <code>true.</code></li> <li><code>elseExpr:Expression</code>: Evaluated if <code>condition</code> evaluates to <code>false.</code></li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"condition\"]\n  child1 --EOG--&gt; parent([\"ConditionalExpression\"])\n  parent --EOG:true--&gt; child2[\"thenExpr\"]\n  parent --EOG:false--&gt; child3[\"elseExpr\"]\n  child2 --EOG--&gt; next:::outer\n  child3 --EOG--&gt; next:::outer\n  parent -.-&gt; child1\n  parent -.-&gt; child2\n  parent -.-&gt; child3</code></pre></p>"},{"location":"CPG/specs/eog/#whilestatement","title":"WhileStatement","text":"<p>This is a classic while loop where the condition is evaluated before every loop iteration.</p> <p>Note: The condition may be enclosed in a declaration, in that case the EOG will not contain a <code>condition</code> but rather a declaration of a variable where the <code>initializer</code> serves as loop condition. Uses of one or the other are currently mutually exclusive.</p> <p>Interesting fields:</p> <ul> <li><code>condition: Expression</code>: The condition for the loop.</li> <li><code>conditionDeclaration: Declaration</code>: The declaration of a variable with condition as initializer.</li> <li><code>statement: Statement</code>: The body of the loop to be iterated over.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"condition|conditionDeclaration\"]\n  child1 --EOG--&gt; parent\n  parent --EOG:false--&gt; next:::outer\n  parent([\"WhileStatement\"]) --EOG:true--&gt; child3[\"statement\"]\n  child3 --EOG--&gt; child1\n  parent -.-&gt; child1\n  parent -.-&gt; child3</code></pre></p>"},{"location":"CPG/specs/eog/#dostatement","title":"DoStatement","text":"<p>This is a classic do while loop where the condition is evaluated after every loop iteration.</p> <p>Interesting fields:</p> <ul> <li><code>condition: Expression</code>: The condition of the loop.</li> <li><code>statement: Statement</code>: The body of the loop to be iterated over.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"statement\"];\n  child1 --EOG--&gt; child2[\"condition\"];\n  child2 --EOG--&gt; parent([\"DoStatement\"]);\n  parent --EOG:false--&gt; next:::outer\n  parent --EOG:true--&gt; child1\n  parent -.-&gt; child1\n  parent -.-&gt; child2</code></pre></p>"},{"location":"CPG/specs/eog/#foreachstatement","title":"ForEachStatement","text":"<p>This is a loop that iterates over all elements in a multi-element <code>iterable</code> with the single elements bound to the declaration of <code>variable</code> while evaluating <code>statement</code>.</p> <p>Interesting fields:</p> <ul> <li><code>iterable: Statement</code>: Elements of this iterable will trigger a loop iteration.</li> <li><code>variable: Statement</code>: Variable declaring Statement that binds elements to a name.</li> <li><code>statement: Statement</code>: Loop body to be iterated over.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"iterable\"]\n  child1 --EOG--&gt; child2[\"variable\"]\n  child2 --EOG--&gt; parent\n  parent --EOG:false--&gt; next:::outer\n  parent([\"ForEachStatement\"]) --EOG:true--&gt; child3[\"statement\"]\n  child3 --EOG--&gt; child1\n  parent -.-&gt; child2\n  parent -.-&gt; child1\n  parent -.-&gt; child3</code></pre></p>"},{"location":"CPG/specs/eog/#forstatement","title":"ForStatement","text":"<p>This is a classic for-loop where a statement is executed before the loop run, a condition is evaluated before every loop iteration, and a post iteration statement can be declared.</p> <p>Note: The condition may be enclosed in a declaration. In this case, the EOG will not contain a <code>condition</code> but rather a declaration of a variable where the <code>initializer</code> serves as loop condition. Uses of one or the other are currently mutually exclusive.</p> <p>Interesting fields:</p> <ul> <li><code>initializerStatement:Statement</code>: Statement run once, before the loop starts.</li> <li><code>condition: Expression</code>: The condition of the loop.</li> <li><code>conditionDeclaration: Declaration</code>: The declaration of a variable with the condition as initializer.</li> <li><code>statement: Statement</code>: The body of the loop to be iterated over.</li> <li><code>iterationStatement: Statement</code>: The statement to be executed after each loop iteration.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  iteration --EOG--&gt; condition\n  statement --EOG--&gt; iteration[\"iterationStatement\"]\n  prev:::outer --EOG--&gt; initializer[\"initializerStatement\"]\n  parent --EOG:false--&gt; next:::outer\n  initializer --EOG--&gt; condition[\"condition|conditionDeclaration\"]\n  condition --EOG--&gt; parent\n  parent([\"ForStatement\"]) --EOG:true--&gt; statement[\"statement\"]</code></pre></p>"},{"location":"CPG/specs/eog/#ifstatement","title":"IfStatement","text":"<p>This is a branching statement where the evaluation of a <code>condition</code> leads to the execution of one optional, or two mutually exclusive blocks of code.</p> <p>Note: The condition may be enclosed in a declaration, in that case the EOG will not contain a <code>condition</code> but rather a declaration of a variable where the <code>initializer</code> serves as branching condition. Uses of one or the other are currently mutually exclusive.</p> <p>Interesting fields:</p> <ul> <li><code>condition: Expression</code>: The condition of the branching decision.</li> <li><code>conditionDeclaration: Declaration</code>: The declaration of a variable with condition as initializer.</li> <li><code>thenStatement: Statement</code>: The body of the mandatory block that is evaluated if the <code>condition</code> evaluates to <code>true</code>.</li> <li><code>elseStatement: Statement</code>: The body of an optional block that is evaluated if the <code>condition</code> evaluates to <code>false</code>.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"initializerStatement\"]\n  child1 --EOG--&gt; child2[\"condition|conditionDeclaration\"]\n  child2 --EOG--&gt; parent\n  parent([\"IfStatement\"]) --EOG:true--&gt; child4[\"thenStatement\"]\n  parent --EOG:false--&gt; child5[\"elseStatement\"]\n  parent --EOG--&gt; next:::outer\n  child4 --EOG--&gt; next:::outer\n  child5 --EOG--&gt; next:::outer</code></pre></p>"},{"location":"CPG/specs/eog/#switchstatement","title":"SwitchStatement","text":"<p>This is a switch statement where the evaluation of a <code>selector</code> decides the entry point in a large block of code. <code>CaseStatements</code> serve as entry points and <code>BreakStatements</code> are needed to prevent all cases after the entry to be evaluated.</p> <p>Note: The <code>selector</code> may be enclosed in a declaration. In this case, the EOG will not contain a selector but rather a declaration of a variable where the <code>initializer</code> serves as switch selector. Uses of one or the other are currently mutually exclusive.</p> <p>Interesting fields:</p> <ul> <li><code>selector: Expression</code>: The evaluated selector which needs to match the expression evaluation of the expression in a <code>caseStatement</code> or the entry will be the <code>defaultStatement</code>.</li> <li><code>selectorDeclaration: Declaration</code>: The declarations <code>initializer</code> serves as <code>selector</code>.</li> <li><code>statement: Statement</code>: The body containing all entry points and statements to be executed.</li> <li><code>caseStatement: Statement</code>: The entry point into the evaluation of the switch body if the <code>selector</code> matches its <code>caseExpression</code>.</li> <li><code>defaultStatement: Statement</code>: The default entry point if no <code>caseExpression</code> matched the selector.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child1[\"initializerStatement\"]\n  child1 --EOG--&gt; child2[\"selector|selectorDeclaration\"]\n  child2 --EOG--&gt; parent\n  parent([\"SwitchStatement\"]) --EOG--&gt; child4[\"caseStatement\"]\n  parent --EOG--&gt; child5[\"defaultStatement\"]\n  child7[\"statement(n-1)\"] --EOG--&gt; child6[\"statement\"]\n  parent -.-&gt;child6\n  child6 -.\"statements(n)\".-&gt; child4\n  child6 -.\"statements(n)\".-&gt; child5\n  child6 -.\"statements(n)\".-&gt; child7\n  child6 --EOG--&gt; next:::outer</code></pre></p>"},{"location":"CPG/specs/eog/#casestatement","title":"CaseStatement","text":"<p>Serves as an entry point inside a <code>SwitchStatement</code>, the statements executed after entry are not children of this structure but can be found on the same AST hierarchy level. </p> <p>Interesting fields:</p> <ul> <li><code>caseExpression: Expression</code>: serves as an entry point if its evaluation matches the <code>selector</code> evaluation in <code>SwitchStatement</code></li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; child[\"caseExpression\"]\n  child --EOG--&gt; parent\n  parent([\"CaseStatement\"]) --EOG--&gt; next:::outer\n  parent -.-&gt; child\n</code></pre></p>"},{"location":"CPG/specs/eog/#lambdaexpression","title":"LambdaExpression","text":"<p>The expression itself is connected to the outer EOG. A separate EOG is built for the expressed code, as the code itself is not executed at this point.</p> <p>Interesting fields:</p> <ul> <li><code>function: FunctionDeclaration</code>: The function declared by the lambda that can be executed at different points in the program.</li> </ul> <p>Scheme: <pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;\n  prev:::outer --EOG--&gt; parent[\"LambdaExpression\"]\n  parent --EOG--&gt; next:::outer\n  parent -.-&gt; child\n  child([\"function\"]) --EOG--&gt;internalNext:::outer\n</code></pre></p>"},{"location":"CPG/specs/graph/","title":"Graph Schema","text":""},{"location":"CPG/specs/graph/#cpg-schema","title":"CPG Schema","text":"<p>This file shows all node labels and relationships between them that are persisted from the in memory CPG to the Neo4j database. The specification is generated automatically and always up to date.</p>"},{"location":"CPG/specs/graph/#node","title":"Node","text":""},{"location":"CPG/specs/graph/#children","title":"Children","text":"<p>Statement Declaration Type AnnotationMember Component Annotation</p>"},{"location":"CPG/specs/graph/#relationships","title":"Relationships","text":"<p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#dfg","title":"DFG","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"DFG*\"--&gt;NodeDFG[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#eog","title":"EOG","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"EOG*\"--&gt;NodeEOG[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#annotations","title":"ANNOTATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"ANNOTATIONS*\"--&gt;NodeANNOTATIONS[&lt;a href='#eannotation'&gt;Annotation&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#ast","title":"AST","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"AST*\"--&gt;NodeAST[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#scope","title":"SCOPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"SCOPE\u00b9\"--&gt;NodeSCOPE[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#typedefs","title":"TYPEDEFS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"TYPEDEFS*\"--&gt;NodeTYPEDEFS[&lt;a href='#etypedefdeclaration'&gt;TypedefDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statement","title":"Statement","text":"<p>Labels:Node Statement</p>"},{"location":"CPG/specs/graph/#children_1","title":"Children","text":"<p>AssertStatement DoStatement CaseStatement ReturnStatement Expression IfStatement DeclarationStatement ForStatement CatchClause SwitchStatement GotoStatement WhileStatement CompoundStatement ContinueStatement DefaultStatement SynchronizedStatement TryStatement ForEachStatement LabelStatement BreakStatement EmptyStatement</p>"},{"location":"CPG/specs/graph/#relationships_1","title":"Relationships","text":"<p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#locals","title":"LOCALS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nStatement--\"LOCALS*\"--&gt;StatementLOCALS[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#assertstatement","title":"AssertStatement","text":"<p>Labels:Node Statement AssertStatement</p>"},{"location":"CPG/specs/graph/#relationships_2","title":"Relationships","text":"<p>CONDITION</p> <p>MESSAGE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#condition","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssertStatement--\"CONDITION\u00b9\"--&gt;AssertStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#message","title":"MESSAGE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssertStatement--\"MESSAGE\u00b9\"--&gt;AssertStatementMESSAGE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#dostatement","title":"DoStatement","text":"<p>Labels:Node Statement DoStatement</p>"},{"location":"CPG/specs/graph/#relationships_3","title":"Relationships","text":"<p>CONDITION</p> <p>STATEMENT</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#condition_1","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDoStatement--\"CONDITION\u00b9\"--&gt;DoStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statement_1","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDoStatement--\"STATEMENT\u00b9\"--&gt;DoStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#casestatement","title":"CaseStatement","text":"<p>Labels:Node Statement CaseStatement</p>"},{"location":"CPG/specs/graph/#relationships_4","title":"Relationships","text":"<p>CASE_EXPRESSION</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#case_expression","title":"CASE_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCaseStatement--\"CASE_EXPRESSION\u00b9\"--&gt;CaseStatementCASE_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#returnstatement","title":"ReturnStatement","text":"<p>Labels:Node Statement ReturnStatement</p>"},{"location":"CPG/specs/graph/#relationships_5","title":"Relationships","text":"<p>RETURN_VALUES</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#return_values","title":"RETURN_VALUES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nReturnStatement--\"RETURN_VALUES*\"--&gt;ReturnStatementRETURN_VALUES[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#expression","title":"Expression","text":"<p>Labels:Node Statement Expression</p>"},{"location":"CPG/specs/graph/#children_2","title":"Children","text":"<p>NewExpression LambdaExpression UnaryOperator ArrayRangeExpression CallExpression DesignatedInitializerExpression KeyValueExpression AssignExpression CastExpression ArrayCreationExpression ArraySubscriptionExpression TypeExpression BinaryOperator ConditionalExpression DeclaredReferenceExpression InitializerListExpression DeleteExpression CompoundStatementExpression ProblemExpression Literal TypeIdExpression ExpressionList</p>"},{"location":"CPG/specs/graph/#relationships_6","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#possible_sub_types","title":"POSSIBLE_SUB_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpression--\"POSSIBLE_SUB_TYPES*\"--&gt;ExpressionPOSSIBLE_SUB_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#type","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpression--\"TYPE\u00b9\"--&gt;ExpressionTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#newexpression","title":"NewExpression","text":"<p>Labels:Node Statement Expression NewExpression</p>"},{"location":"CPG/specs/graph/#relationships_7","title":"Relationships","text":"<p>INITIALIZER</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNewExpression--\"INITIALIZER\u00b9\"--&gt;NewExpressionINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#template_parameters","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNewExpression--\"TEMPLATE_PARAMETERS*\"--&gt;NewExpressionTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#lambdaexpression","title":"LambdaExpression","text":"<p>Labels:Node Statement Expression LambdaExpression</p>"},{"location":"CPG/specs/graph/#relationships_8","title":"Relationships","text":"<p>MUTABLE_VARIABLES</p> <p>FUNCTION</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#mutable_variables","title":"MUTABLE_VARIABLES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLambdaExpression--\"MUTABLE_VARIABLES*\"--&gt;LambdaExpressionMUTABLE_VARIABLES[&lt;a href='#evaluedeclaration'&gt;ValueDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#function","title":"FUNCTION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLambdaExpression--\"FUNCTION\u00b9\"--&gt;LambdaExpressionFUNCTION[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#unaryoperator","title":"UnaryOperator","text":"<p>Labels:Node Statement Expression UnaryOperator</p>"},{"location":"CPG/specs/graph/#relationships_9","title":"Relationships","text":"<p>INPUT</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#input","title":"INPUT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nUnaryOperator--\"INPUT\u00b9\"--&gt;UnaryOperatorINPUT[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#arrayrangeexpression","title":"ArrayRangeExpression","text":"<p>Labels:Node Statement Expression ArrayRangeExpression</p>"},{"location":"CPG/specs/graph/#relationships_10","title":"Relationships","text":"<p>CEILING</p> <p>STEP</p> <p>FLOOR</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#ceiling","title":"CEILING","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"CEILING\u00b9\"--&gt;ArrayRangeExpressionCEILING[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#step","title":"STEP","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"STEP\u00b9\"--&gt;ArrayRangeExpressionSTEP[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#floor","title":"FLOOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"FLOOR\u00b9\"--&gt;ArrayRangeExpressionFLOOR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#callexpression","title":"CallExpression","text":"<p>Labels:Node Statement Expression CallExpression</p>"},{"location":"CPG/specs/graph/#children_3","title":"Children","text":"<p>ExplicitConstructorInvocation ConstructExpression MemberCallExpression</p>"},{"location":"CPG/specs/graph/#relationships_11","title":"Relationships","text":"<p>CALLEE</p> <p>INVOKES</p> <p>TEMPLATE_INSTANTIATION</p> <p>ARGUMENTS</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#callee","title":"CALLEE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"CALLEE\u00b9\"--&gt;CallExpressionCALLEE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#invokes","title":"INVOKES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"INVOKES*\"--&gt;CallExpressionINVOKES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#template_instantiation","title":"TEMPLATE_INSTANTIATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"TEMPLATE_INSTANTIATION\u00b9\"--&gt;CallExpressionTEMPLATE_INSTANTIATION[&lt;a href='#etemplatedeclaration'&gt;TemplateDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#arguments","title":"ARGUMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"ARGUMENTS*\"--&gt;CallExpressionARGUMENTS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#template_parameters_1","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"TEMPLATE_PARAMETERS*\"--&gt;CallExpressionTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#explicitconstructorinvocation","title":"ExplicitConstructorInvocation","text":"<p>Labels:Node Statement Expression CallExpression ExplicitConstructorInvocation</p>"},{"location":"CPG/specs/graph/#relationships_12","title":"Relationships","text":"<p>CALLEE</p> <p>INVOKES</p> <p>TEMPLATE_INSTANTIATION</p> <p>ARGUMENTS</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#constructexpression","title":"ConstructExpression","text":"<p>Labels:Node Statement Expression CallExpression ConstructExpression</p>"},{"location":"CPG/specs/graph/#relationships_13","title":"Relationships","text":"<p>INSTANTIATES</p> <p>CONSTRUCTOR</p> <p>ANOYMOUS_CLASS</p> <p>CALLEE</p> <p>INVOKES</p> <p>TEMPLATE_INSTANTIATION</p> <p>ARGUMENTS</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#instantiates","title":"INSTANTIATES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"INSTANTIATES\u00b9\"--&gt;ConstructExpressionINSTANTIATES[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#constructor","title":"CONSTRUCTOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"CONSTRUCTOR\u00b9\"--&gt;ConstructExpressionCONSTRUCTOR[&lt;a href='#econstructordeclaration'&gt;ConstructorDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#anoymous_class","title":"ANOYMOUS_CLASS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"ANOYMOUS_CLASS\u00b9\"--&gt;ConstructExpressionANOYMOUS_CLASS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#membercallexpression","title":"MemberCallExpression","text":"<p>Labels:Node Statement Expression CallExpression MemberCallExpression</p>"},{"location":"CPG/specs/graph/#relationships_14","title":"Relationships","text":"<p>CALLEE</p> <p>INVOKES</p> <p>TEMPLATE_INSTANTIATION</p> <p>ARGUMENTS</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#designatedinitializerexpression","title":"DesignatedInitializerExpression","text":"<p>Labels:Node Statement Expression DesignatedInitializerExpression</p>"},{"location":"CPG/specs/graph/#relationships_15","title":"Relationships","text":"<p>LHS</p> <p>RHS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#lhs","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDesignatedInitializerExpression--\"LHS*\"--&gt;DesignatedInitializerExpressionLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#rhs","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDesignatedInitializerExpression--\"RHS\u00b9\"--&gt;DesignatedInitializerExpressionRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#keyvalueexpression","title":"KeyValueExpression","text":"<p>Labels:Node Statement Expression KeyValueExpression</p>"},{"location":"CPG/specs/graph/#relationships_16","title":"Relationships","text":"<p>VALUE</p> <p>KEY</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#value","title":"VALUE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nKeyValueExpression--\"VALUE\u00b9\"--&gt;KeyValueExpressionVALUE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#key","title":"KEY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nKeyValueExpression--\"KEY\u00b9\"--&gt;KeyValueExpressionKEY[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#assignexpression","title":"AssignExpression","text":"<p>Labels:Node Statement Expression AssignExpression</p>"},{"location":"CPG/specs/graph/#relationships_17","title":"Relationships","text":"<p>DECLARATIONS</p> <p>LHS</p> <p>RHS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#declarations","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"DECLARATIONS*\"--&gt;AssignExpressionDECLARATIONS[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#lhs_1","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"LHS*\"--&gt;AssignExpressionLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#rhs_1","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"RHS*\"--&gt;AssignExpressionRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#castexpression","title":"CastExpression","text":"<p>Labels:Node Statement Expression CastExpression</p>"},{"location":"CPG/specs/graph/#relationships_18","title":"Relationships","text":"<p>CAST_TYPE</p> <p>EXPRESSION</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#cast_type","title":"CAST_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCastExpression--\"CAST_TYPE\u00b9\"--&gt;CastExpressionCAST_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#expression_1","title":"EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCastExpression--\"EXPRESSION\u00b9\"--&gt;CastExpressionEXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#arraycreationexpression","title":"ArrayCreationExpression","text":"<p>Labels:Node Statement Expression ArrayCreationExpression</p>"},{"location":"CPG/specs/graph/#relationships_19","title":"Relationships","text":"<p>INITIALIZER</p> <p>DIMENSIONS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer_1","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayCreationExpression--\"INITIALIZER\u00b9\"--&gt;ArrayCreationExpressionINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#dimensions","title":"DIMENSIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayCreationExpression--\"DIMENSIONS*\"--&gt;ArrayCreationExpressionDIMENSIONS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#arraysubscriptionexpression","title":"ArraySubscriptionExpression","text":"<p>Labels:Node Statement Expression ArraySubscriptionExpression</p>"},{"location":"CPG/specs/graph/#relationships_20","title":"Relationships","text":"<p>ARRAY_EXPRESSION</p> <p>SUBSCRIPT_EXPRESSION</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#array_expression","title":"ARRAY_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArraySubscriptionExpression--\"ARRAY_EXPRESSION\u00b9\"--&gt;ArraySubscriptionExpressionARRAY_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#subscript_expression","title":"SUBSCRIPT_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArraySubscriptionExpression--\"SUBSCRIPT_EXPRESSION\u00b9\"--&gt;ArraySubscriptionExpressionSUBSCRIPT_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#typeexpression","title":"TypeExpression","text":"<p>Labels:Node Statement Expression TypeExpression</p>"},{"location":"CPG/specs/graph/#relationships_21","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#binaryoperator","title":"BinaryOperator","text":"<p>Labels:Node Statement Expression BinaryOperator</p>"},{"location":"CPG/specs/graph/#relationships_22","title":"Relationships","text":"<p>LHS</p> <p>RHS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#lhs_2","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nBinaryOperator--\"LHS\u00b9\"--&gt;BinaryOperatorLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#rhs_2","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nBinaryOperator--\"RHS\u00b9\"--&gt;BinaryOperatorRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#conditionalexpression","title":"ConditionalExpression","text":"<p>Labels:Node Statement Expression ConditionalExpression</p>"},{"location":"CPG/specs/graph/#relationships_23","title":"Relationships","text":"<p>ELSE_EXPR</p> <p>THEN_EXPR</p> <p>CONDITION</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#else_expr","title":"ELSE_EXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"ELSE_EXPR\u00b9\"--&gt;ConditionalExpressionELSE_EXPR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#then_expr","title":"THEN_EXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"THEN_EXPR\u00b9\"--&gt;ConditionalExpressionTHEN_EXPR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#condition_2","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"CONDITION\u00b9\"--&gt;ConditionalExpressionCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#declaredreferenceexpression","title":"DeclaredReferenceExpression","text":"<p>Labels:Node Statement Expression DeclaredReferenceExpression</p>"},{"location":"CPG/specs/graph/#children_4","title":"Children","text":"<p>MemberExpression</p>"},{"location":"CPG/specs/graph/#relationships_24","title":"Relationships","text":"<p>REFERS_TO</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#refers_to","title":"REFERS_TO","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclaredReferenceExpression--\"REFERS_TO\u00b9\"--&gt;DeclaredReferenceExpressionREFERS_TO[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#memberexpression","title":"MemberExpression","text":"<p>Labels:Node Statement Expression DeclaredReferenceExpression MemberExpression</p>"},{"location":"CPG/specs/graph/#relationships_25","title":"Relationships","text":"<p>BASE</p> <p>REFERS_TO</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#base","title":"BASE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMemberExpression--\"BASE\u00b9\"--&gt;MemberExpressionBASE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#initializerlistexpression","title":"InitializerListExpression","text":"<p>Labels:Node Statement Expression InitializerListExpression</p>"},{"location":"CPG/specs/graph/#relationships_26","title":"Relationships","text":"<p>INITIALIZERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializers","title":"INITIALIZERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nInitializerListExpression--\"INITIALIZERS*\"--&gt;InitializerListExpressionINITIALIZERS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#deleteexpression","title":"DeleteExpression","text":"<p>Labels:Node Statement Expression DeleteExpression</p>"},{"location":"CPG/specs/graph/#relationships_27","title":"Relationships","text":"<p>OPERAND</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#operand","title":"OPERAND","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeleteExpression--\"OPERAND\u00b9\"--&gt;DeleteExpressionOPERAND[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#compoundstatementexpression","title":"CompoundStatementExpression","text":"<p>Labels:Node Statement Expression CompoundStatementExpression</p>"},{"location":"CPG/specs/graph/#relationships_28","title":"Relationships","text":"<p>STATEMENT</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#statement_2","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCompoundStatementExpression--\"STATEMENT\u00b9\"--&gt;CompoundStatementExpressionSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#problemexpression","title":"ProblemExpression","text":"<p>Labels:Node Statement Expression ProblemExpression</p>"},{"location":"CPG/specs/graph/#relationships_29","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#literal","title":"Literal","text":"<p>Labels:Node Statement Expression Literal</p>"},{"location":"CPG/specs/graph/#relationships_30","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#typeidexpression","title":"TypeIdExpression","text":"<p>Labels:Node Statement Expression TypeIdExpression</p>"},{"location":"CPG/specs/graph/#relationships_31","title":"Relationships","text":"<p>REFERENCED_TYPE</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#referenced_type","title":"REFERENCED_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypeIdExpression--\"REFERENCED_TYPE\u00b9\"--&gt;TypeIdExpressionREFERENCED_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#expressionlist","title":"ExpressionList","text":"<p>Labels:Node Statement Expression ExpressionList</p>"},{"location":"CPG/specs/graph/#relationships_32","title":"Relationships","text":"<p>SUBEXPR</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#subexpr","title":"SUBEXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpressionList--\"SUBEXPR*\"--&gt;ExpressionListSUBEXPR[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#ifstatement","title":"IfStatement","text":"<p>Labels:Node Statement IfStatement</p>"},{"location":"CPG/specs/graph/#relationships_33","title":"Relationships","text":"<p>CONDITION_DECLARATION</p> <p>INITIALIZER_STATEMENT</p> <p>THEN_STATEMENT</p> <p>CONDITION</p> <p>ELSE_STATEMENT</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#condition_declaration","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;IfStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#initializer_statement","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;IfStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#then_statement","title":"THEN_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"THEN_STATEMENT\u00b9\"--&gt;IfStatementTHEN_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#condition_3","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"CONDITION\u00b9\"--&gt;IfStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#else_statement","title":"ELSE_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"ELSE_STATEMENT\u00b9\"--&gt;IfStatementELSE_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#declarationstatement","title":"DeclarationStatement","text":"<p>Labels:Node Statement DeclarationStatement</p>"},{"location":"CPG/specs/graph/#children_5","title":"Children","text":"<p>ASMDeclarationStatement</p>"},{"location":"CPG/specs/graph/#relationships_34","title":"Relationships","text":"<p>DECLARATIONS</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#declarations_1","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclarationStatement--\"DECLARATIONS*\"--&gt;DeclarationStatementDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#asmdeclarationstatement","title":"ASMDeclarationStatement","text":"<p>Labels:Node Statement DeclarationStatement ASMDeclarationStatement</p>"},{"location":"CPG/specs/graph/#relationships_35","title":"Relationships","text":"<p>DECLARATIONS</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#forstatement","title":"ForStatement","text":"<p>Labels:Node Statement ForStatement</p>"},{"location":"CPG/specs/graph/#relationships_36","title":"Relationships","text":"<p>CONDITION_DECLARATION</p> <p>INITIALIZER_STATEMENT</p> <p>ITERATION_STATEMENT</p> <p>CONDITION</p> <p>STATEMENT</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#condition_declaration_1","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;ForStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#initializer_statement_1","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;ForStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#iteration_statement","title":"ITERATION_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"ITERATION_STATEMENT\u00b9\"--&gt;ForStatementITERATION_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#condition_4","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"CONDITION\u00b9\"--&gt;ForStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statement_3","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"STATEMENT\u00b9\"--&gt;ForStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#catchclause","title":"CatchClause","text":"<p>Labels:Node Statement CatchClause</p>"},{"location":"CPG/specs/graph/#relationships_37","title":"Relationships","text":"<p>PARAMETER</p> <p>BODY</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#parameter","title":"PARAMETER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCatchClause--\"PARAMETER\u00b9\"--&gt;CatchClausePARAMETER[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#body","title":"BODY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCatchClause--\"BODY\u00b9\"--&gt;CatchClauseBODY[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#switchstatement","title":"SwitchStatement","text":"<p>Labels:Node Statement SwitchStatement</p>"},{"location":"CPG/specs/graph/#relationships_38","title":"Relationships","text":"<p>INITIALIZER_STATEMENT</p> <p>SELECTOR_DECLARATION</p> <p>STATEMENT</p> <p>SELECTOR</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer_statement_2","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;SwitchStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#selector_declaration","title":"SELECTOR_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"SELECTOR_DECLARATION\u00b9\"--&gt;SwitchStatementSELECTOR_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statement_4","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"STATEMENT\u00b9\"--&gt;SwitchStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#selector","title":"SELECTOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"SELECTOR\u00b9\"--&gt;SwitchStatementSELECTOR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#gotostatement","title":"GotoStatement","text":"<p>Labels:Node Statement GotoStatement</p>"},{"location":"CPG/specs/graph/#relationships_39","title":"Relationships","text":"<p>TARGET_LABEL</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#target_label","title":"TARGET_LABEL","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nGotoStatement--\"TARGET_LABEL\u00b9\"--&gt;GotoStatementTARGET_LABEL[&lt;a href='#elabelstatement'&gt;LabelStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#whilestatement","title":"WhileStatement","text":"<p>Labels:Node Statement WhileStatement</p>"},{"location":"CPG/specs/graph/#relationships_40","title":"Relationships","text":"<p>CONDITION_DECLARATION</p> <p>CONDITION</p> <p>STATEMENT</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#condition_declaration_2","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;WhileStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#condition_5","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"CONDITION\u00b9\"--&gt;WhileStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statement_5","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"STATEMENT\u00b9\"--&gt;WhileStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#compoundstatement","title":"CompoundStatement","text":"<p>Labels:Node Statement CompoundStatement</p>"},{"location":"CPG/specs/graph/#relationships_41","title":"Relationships","text":"<p>STATEMENTS</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#statements","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCompoundStatement--\"STATEMENTS*\"--&gt;CompoundStatementSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#continuestatement","title":"ContinueStatement","text":"<p>Labels:Node Statement ContinueStatement</p>"},{"location":"CPG/specs/graph/#relationships_42","title":"Relationships","text":"<p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#defaultstatement","title":"DefaultStatement","text":"<p>Labels:Node Statement DefaultStatement</p>"},{"location":"CPG/specs/graph/#relationships_43","title":"Relationships","text":"<p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#synchronizedstatement","title":"SynchronizedStatement","text":"<p>Labels:Node Statement SynchronizedStatement</p>"},{"location":"CPG/specs/graph/#relationships_44","title":"Relationships","text":"<p>BLOCK_STATEMENT</p> <p>EXPRESSION</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#block_statement","title":"BLOCK_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSynchronizedStatement--\"BLOCK_STATEMENT\u00b9\"--&gt;SynchronizedStatementBLOCK_STATEMENT[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#expression_2","title":"EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSynchronizedStatement--\"EXPRESSION\u00b9\"--&gt;SynchronizedStatementEXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#trystatement","title":"TryStatement","text":"<p>Labels:Node Statement TryStatement</p>"},{"location":"CPG/specs/graph/#relationships_45","title":"Relationships","text":"<p>RESOURCES</p> <p>FINALLY_BLOCK</p> <p>TRY_BLOCK</p> <p>CATCH_CLAUSES</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#resources","title":"RESOURCES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"RESOURCES*\"--&gt;TryStatementRESOURCES[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#finally_block","title":"FINALLY_BLOCK","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"FINALLY_BLOCK\u00b9\"--&gt;TryStatementFINALLY_BLOCK[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#try_block","title":"TRY_BLOCK","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"TRY_BLOCK\u00b9\"--&gt;TryStatementTRY_BLOCK[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#catch_clauses","title":"CATCH_CLAUSES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"CATCH_CLAUSES*\"--&gt;TryStatementCATCH_CLAUSES[&lt;a href='#ecatchclause'&gt;CatchClause&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#foreachstatement","title":"ForEachStatement","text":"<p>Labels:Node Statement ForEachStatement</p>"},{"location":"CPG/specs/graph/#relationships_46","title":"Relationships","text":"<p>STATEMENT</p> <p>VARIABLE</p> <p>ITERABLE</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#statement_6","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"STATEMENT\u00b9\"--&gt;ForEachStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#variable","title":"VARIABLE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"VARIABLE\u00b9\"--&gt;ForEachStatementVARIABLE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#iterable","title":"ITERABLE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"ITERABLE\u00b9\"--&gt;ForEachStatementITERABLE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#labelstatement","title":"LabelStatement","text":"<p>Labels:Node Statement LabelStatement</p>"},{"location":"CPG/specs/graph/#relationships_47","title":"Relationships","text":"<p>SUB_STATEMENT</p> <p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#sub_statement","title":"SUB_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLabelStatement--\"SUB_STATEMENT\u00b9\"--&gt;LabelStatementSUB_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#breakstatement","title":"BreakStatement","text":"<p>Labels:Node Statement BreakStatement</p>"},{"location":"CPG/specs/graph/#relationships_48","title":"Relationships","text":"<p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#emptystatement","title":"EmptyStatement","text":"<p>Labels:Node Statement EmptyStatement</p>"},{"location":"CPG/specs/graph/#relationships_49","title":"Relationships","text":"<p>LOCALS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#declaration","title":"Declaration","text":"<p>Labels:Node Declaration</p>"},{"location":"CPG/specs/graph/#children_6","title":"Children","text":"<p>ValueDeclaration TemplateDeclaration EnumDeclaration TypedefDeclaration UsingDirective NamespaceDeclaration RecordDeclaration DeclarationSequence TranslationUnitDeclaration IncludeDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_50","title":"Relationships","text":"<p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#valuedeclaration","title":"ValueDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration</p>"},{"location":"CPG/specs/graph/#children_7","title":"Children","text":"<p>FieldDeclaration VariableDeclaration ProblemDeclaration EnumConstantDeclaration FunctionDeclaration ParamVariableDeclaration TypeParamDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_51","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#possible_sub_types_1","title":"POSSIBLE_SUB_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"POSSIBLE_SUB_TYPES*\"--&gt;ValueDeclarationPOSSIBLE_SUB_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#type_1","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"TYPE\u00b9\"--&gt;ValueDeclarationTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#usage","title":"USAGE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"USAGE*\"--&gt;ValueDeclarationUSAGE[&lt;a href='#edeclaredreferenceexpression'&gt;DeclaredReferenceExpression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#fielddeclaration","title":"FieldDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FieldDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_52","title":"Relationships","text":"<p>INITIALIZER</p> <p>DEFINES</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer_2","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFieldDeclaration--\"INITIALIZER\u00b9\"--&gt;FieldDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#defines","title":"DEFINES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFieldDeclaration--\"DEFINES\u00b9\"--&gt;FieldDeclarationDEFINES[&lt;a href='#efielddeclaration'&gt;FieldDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#variabledeclaration","title":"VariableDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration VariableDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_53","title":"Relationships","text":"<p>INITIALIZER</p> <p>TEMPLATE_PARAMETERS</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer_3","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nVariableDeclaration--\"INITIALIZER\u00b9\"--&gt;VariableDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#template_parameters_2","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nVariableDeclaration--\"TEMPLATE_PARAMETERS*\"--&gt;VariableDeclarationTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#problemdeclaration","title":"ProblemDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration ProblemDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_54","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#enumconstantdeclaration","title":"EnumConstantDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration EnumConstantDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_55","title":"Relationships","text":"<p>INITIALIZER</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#initializer_4","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumConstantDeclaration--\"INITIALIZER\u00b9\"--&gt;EnumConstantDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#functiondeclaration","title":"FunctionDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration</p>"},{"location":"CPG/specs/graph/#children_8","title":"Children","text":"<p>MethodDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_56","title":"Relationships","text":"<p>THROWS_TYPES</p> <p>OVERRIDES</p> <p>BODY</p> <p>RECORDS</p> <p>RETURN_TYPES</p> <p>PARAMETERS</p> <p>DEFINES</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#throws_types","title":"THROWS_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"THROWS_TYPES*\"--&gt;FunctionDeclarationTHROWS_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#overrides","title":"OVERRIDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"OVERRIDES*\"--&gt;FunctionDeclarationOVERRIDES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#body_1","title":"BODY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"BODY\u00b9\"--&gt;FunctionDeclarationBODY[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#records","title":"RECORDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"RECORDS*\"--&gt;FunctionDeclarationRECORDS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#return_types","title":"RETURN_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"RETURN_TYPES*\"--&gt;FunctionDeclarationRETURN_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#parameters","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"PARAMETERS*\"--&gt;FunctionDeclarationPARAMETERS[&lt;a href='#eparamvariabledeclaration'&gt;ParamVariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#defines_1","title":"DEFINES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"DEFINES\u00b9\"--&gt;FunctionDeclarationDEFINES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#methoddeclaration","title":"MethodDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration MethodDeclaration</p>"},{"location":"CPG/specs/graph/#children_9","title":"Children","text":"<p>ConstructorDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_57","title":"Relationships","text":"<p>RECEIVER</p> <p>RECORD_DECLARATION</p> <p>THROWS_TYPES</p> <p>OVERRIDES</p> <p>BODY</p> <p>RECORDS</p> <p>RETURN_TYPES</p> <p>PARAMETERS</p> <p>DEFINES</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#receiver","title":"RECEIVER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMethodDeclaration--\"RECEIVER\u00b9\"--&gt;MethodDeclarationRECEIVER[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#record_declaration","title":"RECORD_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMethodDeclaration--\"RECORD_DECLARATION\u00b9\"--&gt;MethodDeclarationRECORD_DECLARATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#constructordeclaration","title":"ConstructorDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration MethodDeclaration ConstructorDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_58","title":"Relationships","text":"<p>RECEIVER</p> <p>RECORD_DECLARATION</p> <p>THROWS_TYPES</p> <p>OVERRIDES</p> <p>BODY</p> <p>RECORDS</p> <p>RETURN_TYPES</p> <p>PARAMETERS</p> <p>DEFINES</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#paramvariabledeclaration","title":"ParamVariableDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration ParamVariableDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_59","title":"Relationships","text":"<p>DEFAULT</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#default","title":"DEFAULT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nParamVariableDeclaration--\"DEFAULT\u00b9\"--&gt;ParamVariableDeclarationDEFAULT[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#typeparamdeclaration","title":"TypeParamDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration TypeParamDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_60","title":"Relationships","text":"<p>DEFAULT</p> <p>POSSIBLE_SUB_TYPES</p> <p>TYPE</p> <p>USAGE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#default_1","title":"DEFAULT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypeParamDeclaration--\"DEFAULT\u00b9\"--&gt;TypeParamDeclarationDEFAULT[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#templatedeclaration","title":"TemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration</p>"},{"location":"CPG/specs/graph/#children_10","title":"Children","text":"<p>ClassTemplateDeclaration FunctionTemplateDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_61","title":"Relationships","text":"<p>PARAMETERS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#parameters_1","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTemplateDeclaration--\"PARAMETERS*\"--&gt;TemplateDeclarationPARAMETERS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#classtemplatedeclaration","title":"ClassTemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration ClassTemplateDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_62","title":"Relationships","text":"<p>REALIZATION</p> <p>PARAMETERS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#realization","title":"REALIZATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nClassTemplateDeclaration--\"REALIZATION*\"--&gt;ClassTemplateDeclarationREALIZATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#functiontemplatedeclaration","title":"FunctionTemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration FunctionTemplateDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_63","title":"Relationships","text":"<p>REALIZATION</p> <p>PARAMETERS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#realization_1","title":"REALIZATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionTemplateDeclaration--\"REALIZATION*\"--&gt;FunctionTemplateDeclarationREALIZATION[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#enumdeclaration","title":"EnumDeclaration","text":"<p>Labels:Node Declaration EnumDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_64","title":"Relationships","text":"<p>ENTRIES</p> <p>SUPER_TYPE_DECLARATIONS</p> <p>SUPER_TYPES</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#entries","title":"ENTRIES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"ENTRIES*\"--&gt;EnumDeclarationENTRIES[&lt;a href='#eenumconstantdeclaration'&gt;EnumConstantDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#super_type_declarations","title":"SUPER_TYPE_DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"SUPER_TYPE_DECLARATIONS*\"--&gt;EnumDeclarationSUPER_TYPE_DECLARATIONS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#super_types","title":"SUPER_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"SUPER_TYPES*\"--&gt;EnumDeclarationSUPER_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#typedefdeclaration","title":"TypedefDeclaration","text":"<p>Labels:Node Declaration TypedefDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_65","title":"Relationships","text":"<p>ALIAS</p> <p>TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#alias","title":"ALIAS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypedefDeclaration--\"ALIAS\u00b9\"--&gt;TypedefDeclarationALIAS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#type_2","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypedefDeclaration--\"TYPE\u00b9\"--&gt;TypedefDeclarationTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#usingdirective","title":"UsingDirective","text":"<p>Labels:Node Declaration UsingDirective</p>"},{"location":"CPG/specs/graph/#relationships_66","title":"Relationships","text":"<p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#namespacedeclaration","title":"NamespaceDeclaration","text":"<p>Labels:Node Declaration NamespaceDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_67","title":"Relationships","text":"<p>STATEMENTS</p> <p>DECLARATIONS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#statements_1","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNamespaceDeclaration--\"STATEMENTS*\"--&gt;NamespaceDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#declarations_2","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNamespaceDeclaration--\"DECLARATIONS*\"--&gt;NamespaceDeclarationDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#recorddeclaration","title":"RecordDeclaration","text":"<p>Labels:Node Declaration RecordDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_68","title":"Relationships","text":"<p>IMPORTS</p> <p>CONSTRUCTORS</p> <p>FIELDS</p> <p>TEMPLATES</p> <p>STATIC_IMPORTS</p> <p>RECORDS</p> <p>SUPER_TYPE_DECLARATIONS</p> <p>STATEMENTS</p> <p>METHODS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#imports","title":"IMPORTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"IMPORTS*\"--&gt;RecordDeclarationIMPORTS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#constructors","title":"CONSTRUCTORS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"CONSTRUCTORS*\"--&gt;RecordDeclarationCONSTRUCTORS[&lt;a href='#econstructordeclaration'&gt;ConstructorDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#fields","title":"FIELDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"FIELDS*\"--&gt;RecordDeclarationFIELDS[&lt;a href='#efielddeclaration'&gt;FieldDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#templates","title":"TEMPLATES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"TEMPLATES*\"--&gt;RecordDeclarationTEMPLATES[&lt;a href='#etemplatedeclaration'&gt;TemplateDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#static_imports","title":"STATIC_IMPORTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"STATIC_IMPORTS*\"--&gt;RecordDeclarationSTATIC_IMPORTS[&lt;a href='#evaluedeclaration'&gt;ValueDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#records_1","title":"RECORDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"RECORDS*\"--&gt;RecordDeclarationRECORDS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#super_type_declarations_1","title":"SUPER_TYPE_DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"SUPER_TYPE_DECLARATIONS*\"--&gt;RecordDeclarationSUPER_TYPE_DECLARATIONS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statements_2","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"STATEMENTS*\"--&gt;RecordDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#methods","title":"METHODS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"METHODS*\"--&gt;RecordDeclarationMETHODS[&lt;a href='#emethoddeclaration'&gt;MethodDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#declarationsequence","title":"DeclarationSequence","text":"<p>Labels:Node Declaration DeclarationSequence</p>"},{"location":"CPG/specs/graph/#relationships_69","title":"Relationships","text":"<p>CHILDREN</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#children_11","title":"CHILDREN","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclarationSequence--\"CHILDREN*\"--&gt;DeclarationSequenceCHILDREN[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#translationunitdeclaration","title":"TranslationUnitDeclaration","text":"<p>Labels:Node Declaration TranslationUnitDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_70","title":"Relationships","text":"<p>NAMESPACES</p> <p>DECLARATIONS</p> <p>STATEMENTS</p> <p>INCLUDES</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#namespaces","title":"NAMESPACES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"NAMESPACES*\"--&gt;TranslationUnitDeclarationNAMESPACES[&lt;a href='#enamespacedeclaration'&gt;NamespaceDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#declarations_3","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"DECLARATIONS*\"--&gt;TranslationUnitDeclarationDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#statements_3","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"STATEMENTS*\"--&gt;TranslationUnitDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#includes","title":"INCLUDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"INCLUDES*\"--&gt;TranslationUnitDeclarationINCLUDES[&lt;a href='#eincludedeclaration'&gt;IncludeDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#includedeclaration","title":"IncludeDeclaration","text":"<p>Labels:Node Declaration IncludeDeclaration</p>"},{"location":"CPG/specs/graph/#relationships_71","title":"Relationships","text":"<p>INCLUDES</p> <p>PROBLEMS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#includes_1","title":"INCLUDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIncludeDeclaration--\"INCLUDES*\"--&gt;IncludeDeclarationINCLUDES[&lt;a href='#eincludedeclaration'&gt;IncludeDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#problems","title":"PROBLEMS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIncludeDeclaration--\"PROBLEMS*\"--&gt;IncludeDeclarationPROBLEMS[&lt;a href='#eproblemdeclaration'&gt;ProblemDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#type_3","title":"Type","text":"<p>Labels:Node Type</p>"},{"location":"CPG/specs/graph/#children_12","title":"Children","text":"<p>UnknownType ObjectType ParameterizedType PointerType FunctionPointerType TupleType IncompleteType ReferenceType FunctionType</p>"},{"location":"CPG/specs/graph/#relationships_72","title":"Relationships","text":"<p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#super_type","title":"SUPER_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nType--\"SUPER_TYPE*\"--&gt;TypeSUPER_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#unknowntype","title":"UnknownType","text":"<p>Labels:Node Type UnknownType</p>"},{"location":"CPG/specs/graph/#relationships_73","title":"Relationships","text":"<p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#objecttype","title":"ObjectType","text":"<p>Labels:Node Type ObjectType</p>"},{"location":"CPG/specs/graph/#children_13","title":"Children","text":"<p>NumericType StringType</p>"},{"location":"CPG/specs/graph/#relationships_74","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#generics","title":"GENERICS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nObjectType--\"GENERICS*\"--&gt;ObjectTypeGENERICS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#record_declaration_1","title":"RECORD_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nObjectType--\"RECORD_DECLARATION\u00b9\"--&gt;ObjectTypeRECORD_DECLARATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#numerictype","title":"NumericType","text":"<p>Labels:Node Type ObjectType NumericType</p>"},{"location":"CPG/specs/graph/#children_14","title":"Children","text":"<p>IntegerType FloatingPointType BooleanType</p>"},{"location":"CPG/specs/graph/#relationships_75","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#integertype","title":"IntegerType","text":"<p>Labels:Node Type ObjectType NumericType IntegerType</p>"},{"location":"CPG/specs/graph/#relationships_76","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#floatingpointtype","title":"FloatingPointType","text":"<p>Labels:Node Type ObjectType NumericType FloatingPointType</p>"},{"location":"CPG/specs/graph/#relationships_77","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#booleantype","title":"BooleanType","text":"<p>Labels:Node Type ObjectType NumericType BooleanType</p>"},{"location":"CPG/specs/graph/#relationships_78","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#stringtype","title":"StringType","text":"<p>Labels:Node Type ObjectType StringType</p>"},{"location":"CPG/specs/graph/#relationships_79","title":"Relationships","text":"<p>GENERICS</p> <p>RECORD_DECLARATION</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#parameterizedtype","title":"ParameterizedType","text":"<p>Labels:Node Type ParameterizedType</p>"},{"location":"CPG/specs/graph/#relationships_80","title":"Relationships","text":"<p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#pointertype","title":"PointerType","text":"<p>Labels:Node Type PointerType</p>"},{"location":"CPG/specs/graph/#relationships_81","title":"Relationships","text":"<p>ELEMENT_TYPE</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#element_type","title":"ELEMENT_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nPointerType--\"ELEMENT_TYPE\u00b9\"--&gt;PointerTypeELEMENT_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#functionpointertype","title":"FunctionPointerType","text":"<p>Labels:Node Type FunctionPointerType</p>"},{"location":"CPG/specs/graph/#relationships_82","title":"Relationships","text":"<p>PARAMETERS</p> <p>RETURN_TYPE</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#parameters_2","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionPointerType--\"PARAMETERS*\"--&gt;FunctionPointerTypePARAMETERS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#return_type","title":"RETURN_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionPointerType--\"RETURN_TYPE\u00b9\"--&gt;FunctionPointerTypeRETURN_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#tupletype","title":"TupleType","text":"<p>Labels:Node Type TupleType</p>"},{"location":"CPG/specs/graph/#relationships_83","title":"Relationships","text":"<p>TYPES</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#types","title":"TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTupleType--\"TYPES*\"--&gt;TupleTypeTYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#incompletetype","title":"IncompleteType","text":"<p>Labels:Node Type IncompleteType</p>"},{"location":"CPG/specs/graph/#relationships_84","title":"Relationships","text":"<p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#referencetype","title":"ReferenceType","text":"<p>Labels:Node Type ReferenceType</p>"},{"location":"CPG/specs/graph/#relationships_85","title":"Relationships","text":"<p>REFERENCE</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#reference","title":"REFERENCE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nReferenceType--\"REFERENCE\u00b9\"--&gt;ReferenceTypeREFERENCE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#functiontype","title":"FunctionType","text":"<p>Labels:Node Type FunctionType</p>"},{"location":"CPG/specs/graph/#relationships_86","title":"Relationships","text":"<p>RETURN_TYPES</p> <p>PARAMETERS</p> <p>SUPER_TYPE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#return_types_1","title":"RETURN_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionType--\"RETURN_TYPES*\"--&gt;FunctionTypeRETURN_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#parameters_3","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionType--\"PARAMETERS*\"--&gt;FunctionTypePARAMETERS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#annotationmember","title":"AnnotationMember","text":"<p>Labels:Node AnnotationMember</p>"},{"location":"CPG/specs/graph/#relationships_87","title":"Relationships","text":"<p>VALUE</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#value_1","title":"VALUE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAnnotationMember--\"VALUE\u00b9\"--&gt;AnnotationMemberVALUE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#component","title":"Component","text":"<p>Labels:Node Component</p>"},{"location":"CPG/specs/graph/#relationships_88","title":"Relationships","text":"<p>OUTGOING_INTERACTIONS</p> <p>INCOMING_INTERACTIONS</p> <p>TRANSLATION_UNITS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#outgoing_interactions","title":"OUTGOING_INTERACTIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"OUTGOING_INTERACTIONS*\"--&gt;ComponentOUTGOING_INTERACTIONS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#incoming_interactions","title":"INCOMING_INTERACTIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"INCOMING_INTERACTIONS*\"--&gt;ComponentINCOMING_INTERACTIONS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#translation_units","title":"TRANSLATION_UNITS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"TRANSLATION_UNITS*\"--&gt;ComponentTRANSLATION_UNITS[&lt;a href='#etranslationunitdeclaration'&gt;TranslationUnitDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/graph/#annotation","title":"Annotation","text":"<p>Labels:Node Annotation</p>"},{"location":"CPG/specs/graph/#relationships_89","title":"Relationships","text":"<p>MEMBERS</p> <p>DFG</p> <p>EOG</p> <p>ANNOTATIONS</p> <p>AST</p> <p>SCOPE</p> <p>TYPEDEFS</p>"},{"location":"CPG/specs/graph/#members","title":"MEMBERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAnnotation--\"MEMBERS*\"--&gt;AnnotationMEMBERS[&lt;a href='#eannotationmember'&gt;AnnotationMember&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/","title":"CPG Schema","text":"<p>This file shows all node labels and relationships between them that are persisted from the in memory CPG to the Neo4j database. The specification is generated automatically and always up to date.</p>"},{"location":"CPG/specs/schema/#node","title":"Node","text":""},{"location":"CPG/specs/schema/#children","title":"Children","text":"<p>Statement Declaration Type AnnotationMember Component Annotation </p>"},{"location":"CPG/specs/schema/#relationships","title":"Relationships","text":"<p>DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#dfg","title":"DFG","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"DFG*\"--&gt;NodeDFG[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#eog","title":"EOG","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"EOG*\"--&gt;NodeEOG[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#annotations","title":"ANNOTATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"ANNOTATIONS*\"--&gt;NodeANNOTATIONS[&lt;a href='#eannotation'&gt;Annotation&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#ast","title":"AST","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"AST*\"--&gt;NodeAST[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#scope","title":"SCOPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"SCOPE\u00b9\"--&gt;NodeSCOPE[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#typedefs","title":"TYPEDEFS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNode--\"TYPEDEFS*\"--&gt;NodeTYPEDEFS[&lt;a href='#etypedefdeclaration'&gt;TypedefDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statement","title":"Statement","text":"<p>Labels:Node Statement </p>"},{"location":"CPG/specs/schema/#children_1","title":"Children","text":"<p>AssertStatement DoStatement CaseStatement ReturnStatement Expression IfStatement DeclarationStatement ForStatement CatchClause SwitchStatement GotoStatement WhileStatement CompoundStatement ContinueStatement DefaultStatement SynchronizedStatement TryStatement ForEachStatement LabelStatement BreakStatement EmptyStatement </p>"},{"location":"CPG/specs/schema/#relationships_1","title":"Relationships","text":"<p>LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#locals","title":"LOCALS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nStatement--\"LOCALS*\"--&gt;StatementLOCALS[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#assertstatement","title":"AssertStatement","text":"<p>Labels:Node Statement AssertStatement </p>"},{"location":"CPG/specs/schema/#relationships_2","title":"Relationships","text":"<p>CONDITION MESSAGE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#condition","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssertStatement--\"CONDITION\u00b9\"--&gt;AssertStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#message","title":"MESSAGE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssertStatement--\"MESSAGE\u00b9\"--&gt;AssertStatementMESSAGE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#dostatement","title":"DoStatement","text":"<p>Labels:Node Statement DoStatement </p>"},{"location":"CPG/specs/schema/#relationships_3","title":"Relationships","text":"<p>CONDITION STATEMENT LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#condition_1","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDoStatement--\"CONDITION\u00b9\"--&gt;DoStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statement_1","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDoStatement--\"STATEMENT\u00b9\"--&gt;DoStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#casestatement","title":"CaseStatement","text":"<p>Labels:Node Statement CaseStatement </p>"},{"location":"CPG/specs/schema/#relationships_4","title":"Relationships","text":"<p>CASE_EXPRESSION LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#case_expression","title":"CASE_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCaseStatement--\"CASE_EXPRESSION\u00b9\"--&gt;CaseStatementCASE_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#returnstatement","title":"ReturnStatement","text":"<p>Labels:Node Statement ReturnStatement </p>"},{"location":"CPG/specs/schema/#relationships_5","title":"Relationships","text":"<p>RETURN_VALUES LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#return_values","title":"RETURN_VALUES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nReturnStatement--\"RETURN_VALUES*\"--&gt;ReturnStatementRETURN_VALUES[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#expression","title":"Expression","text":"<p>Labels:Node Statement Expression </p>"},{"location":"CPG/specs/schema/#children_2","title":"Children","text":"<p>NewExpression LambdaExpression UnaryOperator ArrayRangeExpression CallExpression DesignatedInitializerExpression KeyValueExpression AssignExpression CastExpression ArrayCreationExpression ArraySubscriptionExpression TypeExpression BinaryOperator ConditionalExpression DeclaredReferenceExpression InitializerListExpression DeleteExpression CompoundStatementExpression ProblemExpression Literal TypeIdExpression ExpressionList </p>"},{"location":"CPG/specs/schema/#relationships_6","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#possible_sub_types","title":"POSSIBLE_SUB_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpression--\"POSSIBLE_SUB_TYPES*\"--&gt;ExpressionPOSSIBLE_SUB_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#type","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpression--\"TYPE\u00b9\"--&gt;ExpressionTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#newexpression","title":"NewExpression","text":"<p>Labels:Node Statement Expression NewExpression </p>"},{"location":"CPG/specs/schema/#relationships_7","title":"Relationships","text":"<p>INITIALIZER TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNewExpression--\"INITIALIZER\u00b9\"--&gt;NewExpressionINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#template_parameters","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNewExpression--\"TEMPLATE_PARAMETERS*\"--&gt;NewExpressionTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#lambdaexpression","title":"LambdaExpression","text":"<p>Labels:Node Statement Expression LambdaExpression </p>"},{"location":"CPG/specs/schema/#relationships_8","title":"Relationships","text":"<p>MUTABLE_VARIABLES FUNCTION POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#mutable_variables","title":"MUTABLE_VARIABLES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLambdaExpression--\"MUTABLE_VARIABLES*\"--&gt;LambdaExpressionMUTABLE_VARIABLES[&lt;a href='#evaluedeclaration'&gt;ValueDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#function","title":"FUNCTION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLambdaExpression--\"FUNCTION\u00b9\"--&gt;LambdaExpressionFUNCTION[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#unaryoperator","title":"UnaryOperator","text":"<p>Labels:Node Statement Expression UnaryOperator </p>"},{"location":"CPG/specs/schema/#relationships_9","title":"Relationships","text":"<p>INPUT POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#input","title":"INPUT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nUnaryOperator--\"INPUT\u00b9\"--&gt;UnaryOperatorINPUT[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#arrayrangeexpression","title":"ArrayRangeExpression","text":"<p>Labels:Node Statement Expression ArrayRangeExpression </p>"},{"location":"CPG/specs/schema/#relationships_10","title":"Relationships","text":"<p>CEILING STEP FLOOR POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#ceiling","title":"CEILING","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"CEILING\u00b9\"--&gt;ArrayRangeExpressionCEILING[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#step","title":"STEP","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"STEP\u00b9\"--&gt;ArrayRangeExpressionSTEP[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#floor","title":"FLOOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayRangeExpression--\"FLOOR\u00b9\"--&gt;ArrayRangeExpressionFLOOR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#callexpression","title":"CallExpression","text":"<p>Labels:Node Statement Expression CallExpression </p>"},{"location":"CPG/specs/schema/#children_3","title":"Children","text":"<p>ExplicitConstructorInvocation ConstructExpression MemberCallExpression </p>"},{"location":"CPG/specs/schema/#relationships_11","title":"Relationships","text":"<p>CALLEE INVOKES TEMPLATE_INSTANTIATION ARGUMENTS TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#callee","title":"CALLEE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"CALLEE\u00b9\"--&gt;CallExpressionCALLEE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#invokes","title":"INVOKES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"INVOKES*\"--&gt;CallExpressionINVOKES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#template_instantiation","title":"TEMPLATE_INSTANTIATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"TEMPLATE_INSTANTIATION\u00b9\"--&gt;CallExpressionTEMPLATE_INSTANTIATION[&lt;a href='#etemplatedeclaration'&gt;TemplateDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#arguments","title":"ARGUMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"ARGUMENTS*\"--&gt;CallExpressionARGUMENTS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#template_parameters_1","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCallExpression--\"TEMPLATE_PARAMETERS*\"--&gt;CallExpressionTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#explicitconstructorinvocation","title":"ExplicitConstructorInvocation","text":"<p>Labels:Node Statement Expression CallExpression ExplicitConstructorInvocation </p>"},{"location":"CPG/specs/schema/#relationships_12","title":"Relationships","text":"<p>CALLEE INVOKES TEMPLATE_INSTANTIATION ARGUMENTS TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#constructexpression","title":"ConstructExpression","text":"<p>Labels:Node Statement Expression CallExpression ConstructExpression </p>"},{"location":"CPG/specs/schema/#relationships_13","title":"Relationships","text":"<p>INSTANTIATES CONSTRUCTOR ANOYMOUS_CLASS CALLEE INVOKES TEMPLATE_INSTANTIATION ARGUMENTS TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#instantiates","title":"INSTANTIATES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"INSTANTIATES\u00b9\"--&gt;ConstructExpressionINSTANTIATES[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#constructor","title":"CONSTRUCTOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"CONSTRUCTOR\u00b9\"--&gt;ConstructExpressionCONSTRUCTOR[&lt;a href='#econstructordeclaration'&gt;ConstructorDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#anoymous_class","title":"ANOYMOUS_CLASS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConstructExpression--\"ANOYMOUS_CLASS\u00b9\"--&gt;ConstructExpressionANOYMOUS_CLASS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#membercallexpression","title":"MemberCallExpression","text":"<p>Labels:Node Statement Expression CallExpression MemberCallExpression </p>"},{"location":"CPG/specs/schema/#relationships_14","title":"Relationships","text":"<p>CALLEE INVOKES TEMPLATE_INSTANTIATION ARGUMENTS TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#designatedinitializerexpression","title":"DesignatedInitializerExpression","text":"<p>Labels:Node Statement Expression DesignatedInitializerExpression </p>"},{"location":"CPG/specs/schema/#relationships_15","title":"Relationships","text":"<p>LHS RHS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#lhs","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDesignatedInitializerExpression--\"LHS*\"--&gt;DesignatedInitializerExpressionLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#rhs","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDesignatedInitializerExpression--\"RHS\u00b9\"--&gt;DesignatedInitializerExpressionRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#keyvalueexpression","title":"KeyValueExpression","text":"<p>Labels:Node Statement Expression KeyValueExpression </p>"},{"location":"CPG/specs/schema/#relationships_16","title":"Relationships","text":"<p>VALUE KEY POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#value","title":"VALUE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nKeyValueExpression--\"VALUE\u00b9\"--&gt;KeyValueExpressionVALUE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#key","title":"KEY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nKeyValueExpression--\"KEY\u00b9\"--&gt;KeyValueExpressionKEY[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#assignexpression","title":"AssignExpression","text":"<p>Labels:Node Statement Expression AssignExpression </p>"},{"location":"CPG/specs/schema/#relationships_17","title":"Relationships","text":"<p>DECLARATIONS LHS RHS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#declarations","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"DECLARATIONS*\"--&gt;AssignExpressionDECLARATIONS[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#lhs_1","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"LHS*\"--&gt;AssignExpressionLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#rhs_1","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAssignExpression--\"RHS*\"--&gt;AssignExpressionRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#castexpression","title":"CastExpression","text":"<p>Labels:Node Statement Expression CastExpression </p>"},{"location":"CPG/specs/schema/#relationships_18","title":"Relationships","text":"<p>CAST_TYPE EXPRESSION POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#cast_type","title":"CAST_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCastExpression--\"CAST_TYPE\u00b9\"--&gt;CastExpressionCAST_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#expression_1","title":"EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCastExpression--\"EXPRESSION\u00b9\"--&gt;CastExpressionEXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#arraycreationexpression","title":"ArrayCreationExpression","text":"<p>Labels:Node Statement Expression ArrayCreationExpression </p>"},{"location":"CPG/specs/schema/#relationships_19","title":"Relationships","text":"<p>INITIALIZER DIMENSIONS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer_1","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayCreationExpression--\"INITIALIZER\u00b9\"--&gt;ArrayCreationExpressionINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#dimensions","title":"DIMENSIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArrayCreationExpression--\"DIMENSIONS*\"--&gt;ArrayCreationExpressionDIMENSIONS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#arraysubscriptionexpression","title":"ArraySubscriptionExpression","text":"<p>Labels:Node Statement Expression ArraySubscriptionExpression </p>"},{"location":"CPG/specs/schema/#relationships_20","title":"Relationships","text":"<p>ARRAY_EXPRESSION SUBSCRIPT_EXPRESSION POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#array_expression","title":"ARRAY_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArraySubscriptionExpression--\"ARRAY_EXPRESSION\u00b9\"--&gt;ArraySubscriptionExpressionARRAY_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#subscript_expression","title":"SUBSCRIPT_EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nArraySubscriptionExpression--\"SUBSCRIPT_EXPRESSION\u00b9\"--&gt;ArraySubscriptionExpressionSUBSCRIPT_EXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#typeexpression","title":"TypeExpression","text":"<p>Labels:Node Statement Expression TypeExpression </p>"},{"location":"CPG/specs/schema/#relationships_21","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#binaryoperator","title":"BinaryOperator","text":"<p>Labels:Node Statement Expression BinaryOperator </p>"},{"location":"CPG/specs/schema/#relationships_22","title":"Relationships","text":"<p>LHS RHS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#lhs_2","title":"LHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nBinaryOperator--\"LHS\u00b9\"--&gt;BinaryOperatorLHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#rhs_2","title":"RHS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nBinaryOperator--\"RHS\u00b9\"--&gt;BinaryOperatorRHS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#conditionalexpression","title":"ConditionalExpression","text":"<p>Labels:Node Statement Expression ConditionalExpression </p>"},{"location":"CPG/specs/schema/#relationships_23","title":"Relationships","text":"<p>ELSE_EXPR THEN_EXPR CONDITION POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#else_expr","title":"ELSE_EXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"ELSE_EXPR\u00b9\"--&gt;ConditionalExpressionELSE_EXPR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#then_expr","title":"THEN_EXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"THEN_EXPR\u00b9\"--&gt;ConditionalExpressionTHEN_EXPR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#condition_2","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nConditionalExpression--\"CONDITION\u00b9\"--&gt;ConditionalExpressionCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#declaredreferenceexpression","title":"DeclaredReferenceExpression","text":"<p>Labels:Node Statement Expression DeclaredReferenceExpression </p>"},{"location":"CPG/specs/schema/#children_4","title":"Children","text":"<p>MemberExpression </p>"},{"location":"CPG/specs/schema/#relationships_24","title":"Relationships","text":"<p>REFERS_TO POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#refers_to","title":"REFERS_TO","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclaredReferenceExpression--\"REFERS_TO\u00b9\"--&gt;DeclaredReferenceExpressionREFERS_TO[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#memberexpression","title":"MemberExpression","text":"<p>Labels:Node Statement Expression DeclaredReferenceExpression MemberExpression </p>"},{"location":"CPG/specs/schema/#relationships_25","title":"Relationships","text":"<p>BASE REFERS_TO POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#base","title":"BASE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMemberExpression--\"BASE\u00b9\"--&gt;MemberExpressionBASE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#initializerlistexpression","title":"InitializerListExpression","text":"<p>Labels:Node Statement Expression InitializerListExpression </p>"},{"location":"CPG/specs/schema/#relationships_26","title":"Relationships","text":"<p>INITIALIZERS POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializers","title":"INITIALIZERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nInitializerListExpression--\"INITIALIZERS*\"--&gt;InitializerListExpressionINITIALIZERS[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#deleteexpression","title":"DeleteExpression","text":"<p>Labels:Node Statement Expression DeleteExpression </p>"},{"location":"CPG/specs/schema/#relationships_27","title":"Relationships","text":"<p>OPERAND POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#operand","title":"OPERAND","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeleteExpression--\"OPERAND\u00b9\"--&gt;DeleteExpressionOPERAND[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#compoundstatementexpression","title":"CompoundStatementExpression","text":"<p>Labels:Node Statement Expression CompoundStatementExpression </p>"},{"location":"CPG/specs/schema/#relationships_28","title":"Relationships","text":"<p>STATEMENT POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#statement_2","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCompoundStatementExpression--\"STATEMENT\u00b9\"--&gt;CompoundStatementExpressionSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#problemexpression","title":"ProblemExpression","text":"<p>Labels:Node Statement Expression ProblemExpression </p>"},{"location":"CPG/specs/schema/#relationships_29","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#literal","title":"Literal","text":"<p>Labels:Node Statement Expression Literal </p>"},{"location":"CPG/specs/schema/#relationships_30","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#typeidexpression","title":"TypeIdExpression","text":"<p>Labels:Node Statement Expression TypeIdExpression </p>"},{"location":"CPG/specs/schema/#relationships_31","title":"Relationships","text":"<p>REFERENCED_TYPE POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#referenced_type","title":"REFERENCED_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypeIdExpression--\"REFERENCED_TYPE\u00b9\"--&gt;TypeIdExpressionREFERENCED_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#expressionlist","title":"ExpressionList","text":"<p>Labels:Node Statement Expression ExpressionList </p>"},{"location":"CPG/specs/schema/#relationships_32","title":"Relationships","text":"<p>SUBEXPR POSSIBLE_SUB_TYPES TYPE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#subexpr","title":"SUBEXPR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nExpressionList--\"SUBEXPR*\"--&gt;ExpressionListSUBEXPR[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#ifstatement","title":"IfStatement","text":"<p>Labels:Node Statement IfStatement </p>"},{"location":"CPG/specs/schema/#relationships_33","title":"Relationships","text":"<p>CONDITION_DECLARATION INITIALIZER_STATEMENT THEN_STATEMENT CONDITION ELSE_STATEMENT LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#condition_declaration","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;IfStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#initializer_statement","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;IfStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#then_statement","title":"THEN_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"THEN_STATEMENT\u00b9\"--&gt;IfStatementTHEN_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#condition_3","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"CONDITION\u00b9\"--&gt;IfStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#else_statement","title":"ELSE_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIfStatement--\"ELSE_STATEMENT\u00b9\"--&gt;IfStatementELSE_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#declarationstatement","title":"DeclarationStatement","text":"<p>Labels:Node Statement DeclarationStatement </p>"},{"location":"CPG/specs/schema/#children_5","title":"Children","text":"<p>ASMDeclarationStatement </p>"},{"location":"CPG/specs/schema/#relationships_34","title":"Relationships","text":"<p>DECLARATIONS LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#declarations_1","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclarationStatement--\"DECLARATIONS*\"--&gt;DeclarationStatementDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#asmdeclarationstatement","title":"ASMDeclarationStatement","text":"<p>Labels:Node Statement DeclarationStatement ASMDeclarationStatement </p>"},{"location":"CPG/specs/schema/#relationships_35","title":"Relationships","text":"<p>DECLARATIONS LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#forstatement","title":"ForStatement","text":"<p>Labels:Node Statement ForStatement </p>"},{"location":"CPG/specs/schema/#relationships_36","title":"Relationships","text":"<p>CONDITION_DECLARATION INITIALIZER_STATEMENT ITERATION_STATEMENT CONDITION STATEMENT LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#condition_declaration_1","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;ForStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#initializer_statement_1","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;ForStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#iteration_statement","title":"ITERATION_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"ITERATION_STATEMENT\u00b9\"--&gt;ForStatementITERATION_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#condition_4","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"CONDITION\u00b9\"--&gt;ForStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statement_3","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForStatement--\"STATEMENT\u00b9\"--&gt;ForStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#catchclause","title":"CatchClause","text":"<p>Labels:Node Statement CatchClause </p>"},{"location":"CPG/specs/schema/#relationships_37","title":"Relationships","text":"<p>PARAMETER BODY LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#parameter","title":"PARAMETER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCatchClause--\"PARAMETER\u00b9\"--&gt;CatchClausePARAMETER[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#body","title":"BODY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCatchClause--\"BODY\u00b9\"--&gt;CatchClauseBODY[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#switchstatement","title":"SwitchStatement","text":"<p>Labels:Node Statement SwitchStatement </p>"},{"location":"CPG/specs/schema/#relationships_38","title":"Relationships","text":"<p>INITIALIZER_STATEMENT SELECTOR_DECLARATION STATEMENT SELECTOR LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer_statement_2","title":"INITIALIZER_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"INITIALIZER_STATEMENT\u00b9\"--&gt;SwitchStatementINITIALIZER_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#selector_declaration","title":"SELECTOR_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"SELECTOR_DECLARATION\u00b9\"--&gt;SwitchStatementSELECTOR_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statement_4","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"STATEMENT\u00b9\"--&gt;SwitchStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#selector","title":"SELECTOR","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSwitchStatement--\"SELECTOR\u00b9\"--&gt;SwitchStatementSELECTOR[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#gotostatement","title":"GotoStatement","text":"<p>Labels:Node Statement GotoStatement </p>"},{"location":"CPG/specs/schema/#relationships_39","title":"Relationships","text":"<p>TARGET_LABEL LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#target_label","title":"TARGET_LABEL","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nGotoStatement--\"TARGET_LABEL\u00b9\"--&gt;GotoStatementTARGET_LABEL[&lt;a href='#elabelstatement'&gt;LabelStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#whilestatement","title":"WhileStatement","text":"<p>Labels:Node Statement WhileStatement </p>"},{"location":"CPG/specs/schema/#relationships_40","title":"Relationships","text":"<p>CONDITION_DECLARATION CONDITION STATEMENT LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#condition_declaration_2","title":"CONDITION_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"CONDITION_DECLARATION\u00b9\"--&gt;WhileStatementCONDITION_DECLARATION[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#condition_5","title":"CONDITION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"CONDITION\u00b9\"--&gt;WhileStatementCONDITION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statement_5","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nWhileStatement--\"STATEMENT\u00b9\"--&gt;WhileStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#compoundstatement","title":"CompoundStatement","text":"<p>Labels:Node Statement CompoundStatement </p>"},{"location":"CPG/specs/schema/#relationships_41","title":"Relationships","text":"<p>STATEMENTS LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#statements","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nCompoundStatement--\"STATEMENTS*\"--&gt;CompoundStatementSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#continuestatement","title":"ContinueStatement","text":"<p>Labels:Node Statement ContinueStatement </p>"},{"location":"CPG/specs/schema/#relationships_42","title":"Relationships","text":"<p>LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#defaultstatement","title":"DefaultStatement","text":"<p>Labels:Node Statement DefaultStatement </p>"},{"location":"CPG/specs/schema/#relationships_43","title":"Relationships","text":"<p>LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#synchronizedstatement","title":"SynchronizedStatement","text":"<p>Labels:Node Statement SynchronizedStatement </p>"},{"location":"CPG/specs/schema/#relationships_44","title":"Relationships","text":"<p>BLOCK_STATEMENT EXPRESSION LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#block_statement","title":"BLOCK_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSynchronizedStatement--\"BLOCK_STATEMENT\u00b9\"--&gt;SynchronizedStatementBLOCK_STATEMENT[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#expression_2","title":"EXPRESSION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nSynchronizedStatement--\"EXPRESSION\u00b9\"--&gt;SynchronizedStatementEXPRESSION[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#trystatement","title":"TryStatement","text":"<p>Labels:Node Statement TryStatement </p>"},{"location":"CPG/specs/schema/#relationships_45","title":"Relationships","text":"<p>RESOURCES FINALLY_BLOCK TRY_BLOCK CATCH_CLAUSES LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#resources","title":"RESOURCES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"RESOURCES*\"--&gt;TryStatementRESOURCES[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#finally_block","title":"FINALLY_BLOCK","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"FINALLY_BLOCK\u00b9\"--&gt;TryStatementFINALLY_BLOCK[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#try_block","title":"TRY_BLOCK","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"TRY_BLOCK\u00b9\"--&gt;TryStatementTRY_BLOCK[&lt;a href='#ecompoundstatement'&gt;CompoundStatement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#catch_clauses","title":"CATCH_CLAUSES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTryStatement--\"CATCH_CLAUSES*\"--&gt;TryStatementCATCH_CLAUSES[&lt;a href='#ecatchclause'&gt;CatchClause&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#foreachstatement","title":"ForEachStatement","text":"<p>Labels:Node Statement ForEachStatement </p>"},{"location":"CPG/specs/schema/#relationships_46","title":"Relationships","text":"<p>STATEMENT VARIABLE ITERABLE LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#statement_6","title":"STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"STATEMENT\u00b9\"--&gt;ForEachStatementSTATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#variable","title":"VARIABLE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"VARIABLE\u00b9\"--&gt;ForEachStatementVARIABLE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#iterable","title":"ITERABLE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nForEachStatement--\"ITERABLE\u00b9\"--&gt;ForEachStatementITERABLE[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#labelstatement","title":"LabelStatement","text":"<p>Labels:Node Statement LabelStatement </p>"},{"location":"CPG/specs/schema/#relationships_47","title":"Relationships","text":"<p>SUB_STATEMENT LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#sub_statement","title":"SUB_STATEMENT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nLabelStatement--\"SUB_STATEMENT\u00b9\"--&gt;LabelStatementSUB_STATEMENT[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#breakstatement","title":"BreakStatement","text":"<p>Labels:Node Statement BreakStatement </p>"},{"location":"CPG/specs/schema/#relationships_48","title":"Relationships","text":"<p>LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#emptystatement","title":"EmptyStatement","text":"<p>Labels:Node Statement EmptyStatement </p>"},{"location":"CPG/specs/schema/#relationships_49","title":"Relationships","text":"<p>LOCALS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#declaration","title":"Declaration","text":"<p>Labels:Node Declaration </p>"},{"location":"CPG/specs/schema/#children_6","title":"Children","text":"<p>ValueDeclaration TemplateDeclaration EnumDeclaration TypedefDeclaration UsingDirective NamespaceDeclaration RecordDeclaration DeclarationSequence TranslationUnitDeclaration IncludeDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_50","title":"Relationships","text":"<p>DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#valuedeclaration","title":"ValueDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration </p>"},{"location":"CPG/specs/schema/#children_7","title":"Children","text":"<p>FieldDeclaration VariableDeclaration ProblemDeclaration EnumConstantDeclaration FunctionDeclaration ParamVariableDeclaration TypeParamDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_51","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#possible_sub_types_1","title":"POSSIBLE_SUB_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"POSSIBLE_SUB_TYPES*\"--&gt;ValueDeclarationPOSSIBLE_SUB_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#type_1","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"TYPE\u00b9\"--&gt;ValueDeclarationTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#usage","title":"USAGE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nValueDeclaration--\"USAGE*\"--&gt;ValueDeclarationUSAGE[&lt;a href='#edeclaredreferenceexpression'&gt;DeclaredReferenceExpression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#fielddeclaration","title":"FieldDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FieldDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_52","title":"Relationships","text":"<p>INITIALIZER DEFINES POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer_2","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFieldDeclaration--\"INITIALIZER\u00b9\"--&gt;FieldDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#defines","title":"DEFINES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFieldDeclaration--\"DEFINES\u00b9\"--&gt;FieldDeclarationDEFINES[&lt;a href='#efielddeclaration'&gt;FieldDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#variabledeclaration","title":"VariableDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration VariableDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_53","title":"Relationships","text":"<p>INITIALIZER TEMPLATE_PARAMETERS POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer_3","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nVariableDeclaration--\"INITIALIZER\u00b9\"--&gt;VariableDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#template_parameters_2","title":"TEMPLATE_PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nVariableDeclaration--\"TEMPLATE_PARAMETERS*\"--&gt;VariableDeclarationTEMPLATE_PARAMETERS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#problemdeclaration","title":"ProblemDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration ProblemDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_54","title":"Relationships","text":"<p>POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#enumconstantdeclaration","title":"EnumConstantDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration EnumConstantDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_55","title":"Relationships","text":"<p>INITIALIZER POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#initializer_4","title":"INITIALIZER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumConstantDeclaration--\"INITIALIZER\u00b9\"--&gt;EnumConstantDeclarationINITIALIZER[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#functiondeclaration","title":"FunctionDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration </p>"},{"location":"CPG/specs/schema/#children_8","title":"Children","text":"<p>MethodDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_56","title":"Relationships","text":"<p>THROWS_TYPES OVERRIDES BODY RECORDS RETURN_TYPES PARAMETERS DEFINES POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#throws_types","title":"THROWS_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"THROWS_TYPES*\"--&gt;FunctionDeclarationTHROWS_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#overrides","title":"OVERRIDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"OVERRIDES*\"--&gt;FunctionDeclarationOVERRIDES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#body_1","title":"BODY","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"BODY\u00b9\"--&gt;FunctionDeclarationBODY[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#records","title":"RECORDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"RECORDS*\"--&gt;FunctionDeclarationRECORDS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#return_types","title":"RETURN_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"RETURN_TYPES*\"--&gt;FunctionDeclarationRETURN_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#parameters","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"PARAMETERS*\"--&gt;FunctionDeclarationPARAMETERS[&lt;a href='#eparamvariabledeclaration'&gt;ParamVariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#defines_1","title":"DEFINES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionDeclaration--\"DEFINES\u00b9\"--&gt;FunctionDeclarationDEFINES[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#methoddeclaration","title":"MethodDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration MethodDeclaration </p>"},{"location":"CPG/specs/schema/#children_9","title":"Children","text":"<p>ConstructorDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_57","title":"Relationships","text":"<p>RECEIVER RECORD_DECLARATION THROWS_TYPES OVERRIDES BODY RECORDS RETURN_TYPES PARAMETERS DEFINES POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#receiver","title":"RECEIVER","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMethodDeclaration--\"RECEIVER\u00b9\"--&gt;MethodDeclarationRECEIVER[&lt;a href='#evariabledeclaration'&gt;VariableDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#record_declaration","title":"RECORD_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nMethodDeclaration--\"RECORD_DECLARATION\u00b9\"--&gt;MethodDeclarationRECORD_DECLARATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#constructordeclaration","title":"ConstructorDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration FunctionDeclaration MethodDeclaration ConstructorDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_58","title":"Relationships","text":"<p>RECEIVER RECORD_DECLARATION THROWS_TYPES OVERRIDES BODY RECORDS RETURN_TYPES PARAMETERS DEFINES POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#paramvariabledeclaration","title":"ParamVariableDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration ParamVariableDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_59","title":"Relationships","text":"<p>DEFAULT POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#default","title":"DEFAULT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nParamVariableDeclaration--\"DEFAULT\u00b9\"--&gt;ParamVariableDeclarationDEFAULT[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#typeparamdeclaration","title":"TypeParamDeclaration","text":"<p>Labels:Node Declaration ValueDeclaration TypeParamDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_60","title":"Relationships","text":"<p>DEFAULT POSSIBLE_SUB_TYPES TYPE USAGE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#default_1","title":"DEFAULT","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypeParamDeclaration--\"DEFAULT\u00b9\"--&gt;TypeParamDeclarationDEFAULT[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#templatedeclaration","title":"TemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration </p>"},{"location":"CPG/specs/schema/#children_10","title":"Children","text":"<p>ClassTemplateDeclaration FunctionTemplateDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_61","title":"Relationships","text":"<p>PARAMETERS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#parameters_1","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTemplateDeclaration--\"PARAMETERS*\"--&gt;TemplateDeclarationPARAMETERS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#classtemplatedeclaration","title":"ClassTemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration ClassTemplateDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_62","title":"Relationships","text":"<p>REALIZATION PARAMETERS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#realization","title":"REALIZATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nClassTemplateDeclaration--\"REALIZATION*\"--&gt;ClassTemplateDeclarationREALIZATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#functiontemplatedeclaration","title":"FunctionTemplateDeclaration","text":"<p>Labels:Node Declaration TemplateDeclaration FunctionTemplateDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_63","title":"Relationships","text":"<p>REALIZATION PARAMETERS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#realization_1","title":"REALIZATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionTemplateDeclaration--\"REALIZATION*\"--&gt;FunctionTemplateDeclarationREALIZATION[&lt;a href='#efunctiondeclaration'&gt;FunctionDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#enumdeclaration","title":"EnumDeclaration","text":"<p>Labels:Node Declaration EnumDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_64","title":"Relationships","text":"<p>ENTRIES SUPER_TYPE_DECLARATIONS SUPER_TYPES DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#entries","title":"ENTRIES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"ENTRIES*\"--&gt;EnumDeclarationENTRIES[&lt;a href='#eenumconstantdeclaration'&gt;EnumConstantDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#super_type_declarations","title":"SUPER_TYPE_DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"SUPER_TYPE_DECLARATIONS*\"--&gt;EnumDeclarationSUPER_TYPE_DECLARATIONS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#super_types","title":"SUPER_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nEnumDeclaration--\"SUPER_TYPES*\"--&gt;EnumDeclarationSUPER_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#typedefdeclaration","title":"TypedefDeclaration","text":"<p>Labels:Node Declaration TypedefDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_65","title":"Relationships","text":"<p>ALIAS TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#alias","title":"ALIAS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypedefDeclaration--\"ALIAS\u00b9\"--&gt;TypedefDeclarationALIAS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#type_2","title":"TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTypedefDeclaration--\"TYPE\u00b9\"--&gt;TypedefDeclarationTYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#usingdirective","title":"UsingDirective","text":"<p>Labels:Node Declaration UsingDirective </p>"},{"location":"CPG/specs/schema/#relationships_66","title":"Relationships","text":"<p>DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#namespacedeclaration","title":"NamespaceDeclaration","text":"<p>Labels:Node Declaration NamespaceDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_67","title":"Relationships","text":"<p>STATEMENTS DECLARATIONS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#statements_1","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNamespaceDeclaration--\"STATEMENTS*\"--&gt;NamespaceDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#declarations_2","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nNamespaceDeclaration--\"DECLARATIONS*\"--&gt;NamespaceDeclarationDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#recorddeclaration","title":"RecordDeclaration","text":"<p>Labels:Node Declaration RecordDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_68","title":"Relationships","text":"<p>IMPORTS CONSTRUCTORS FIELDS TEMPLATES STATIC_IMPORTS RECORDS SUPER_TYPE_DECLARATIONS STATEMENTS METHODS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#imports","title":"IMPORTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"IMPORTS*\"--&gt;RecordDeclarationIMPORTS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#constructors","title":"CONSTRUCTORS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"CONSTRUCTORS*\"--&gt;RecordDeclarationCONSTRUCTORS[&lt;a href='#econstructordeclaration'&gt;ConstructorDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#fields","title":"FIELDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"FIELDS*\"--&gt;RecordDeclarationFIELDS[&lt;a href='#efielddeclaration'&gt;FieldDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#templates","title":"TEMPLATES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"TEMPLATES*\"--&gt;RecordDeclarationTEMPLATES[&lt;a href='#etemplatedeclaration'&gt;TemplateDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#static_imports","title":"STATIC_IMPORTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"STATIC_IMPORTS*\"--&gt;RecordDeclarationSTATIC_IMPORTS[&lt;a href='#evaluedeclaration'&gt;ValueDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#records_1","title":"RECORDS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"RECORDS*\"--&gt;RecordDeclarationRECORDS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#super_type_declarations_1","title":"SUPER_TYPE_DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"SUPER_TYPE_DECLARATIONS*\"--&gt;RecordDeclarationSUPER_TYPE_DECLARATIONS[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statements_2","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"STATEMENTS*\"--&gt;RecordDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#methods","title":"METHODS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nRecordDeclaration--\"METHODS*\"--&gt;RecordDeclarationMETHODS[&lt;a href='#emethoddeclaration'&gt;MethodDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#declarationsequence","title":"DeclarationSequence","text":"<p>Labels:Node Declaration DeclarationSequence </p>"},{"location":"CPG/specs/schema/#relationships_69","title":"Relationships","text":"<p>CHILDREN DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#children_11","title":"CHILDREN","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nDeclarationSequence--\"CHILDREN*\"--&gt;DeclarationSequenceCHILDREN[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#translationunitdeclaration","title":"TranslationUnitDeclaration","text":"<p>Labels:Node Declaration TranslationUnitDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_70","title":"Relationships","text":"<p>NAMESPACES DECLARATIONS STATEMENTS INCLUDES DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#namespaces","title":"NAMESPACES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"NAMESPACES*\"--&gt;TranslationUnitDeclarationNAMESPACES[&lt;a href='#enamespacedeclaration'&gt;NamespaceDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#declarations_3","title":"DECLARATIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"DECLARATIONS*\"--&gt;TranslationUnitDeclarationDECLARATIONS[&lt;a href='#edeclaration'&gt;Declaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#statements_3","title":"STATEMENTS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"STATEMENTS*\"--&gt;TranslationUnitDeclarationSTATEMENTS[&lt;a href='#estatement'&gt;Statement&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#includes","title":"INCLUDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTranslationUnitDeclaration--\"INCLUDES*\"--&gt;TranslationUnitDeclarationINCLUDES[&lt;a href='#eincludedeclaration'&gt;IncludeDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#includedeclaration","title":"IncludeDeclaration","text":"<p>Labels:Node Declaration IncludeDeclaration </p>"},{"location":"CPG/specs/schema/#relationships_71","title":"Relationships","text":"<p>INCLUDES PROBLEMS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#includes_1","title":"INCLUDES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIncludeDeclaration--\"INCLUDES*\"--&gt;IncludeDeclarationINCLUDES[&lt;a href='#eincludedeclaration'&gt;IncludeDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#problems","title":"PROBLEMS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nIncludeDeclaration--\"PROBLEMS*\"--&gt;IncludeDeclarationPROBLEMS[&lt;a href='#eproblemdeclaration'&gt;ProblemDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#type_3","title":"Type","text":"<p>Labels:Node Type </p>"},{"location":"CPG/specs/schema/#children_12","title":"Children","text":"<p>UnknownType ObjectType ParameterizedType PointerType FunctionPointerType TupleType IncompleteType ReferenceType FunctionType </p>"},{"location":"CPG/specs/schema/#relationships_72","title":"Relationships","text":"<p>SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#super_type","title":"SUPER_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nType--\"SUPER_TYPE*\"--&gt;TypeSUPER_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#unknowntype","title":"UnknownType","text":"<p>Labels:Node Type UnknownType </p>"},{"location":"CPG/specs/schema/#relationships_73","title":"Relationships","text":"<p>SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#objecttype","title":"ObjectType","text":"<p>Labels:Node Type ObjectType </p>"},{"location":"CPG/specs/schema/#children_13","title":"Children","text":"<p>NumericType StringType </p>"},{"location":"CPG/specs/schema/#relationships_74","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#generics","title":"GENERICS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nObjectType--\"GENERICS*\"--&gt;ObjectTypeGENERICS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#record_declaration_1","title":"RECORD_DECLARATION","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nObjectType--\"RECORD_DECLARATION\u00b9\"--&gt;ObjectTypeRECORD_DECLARATION[&lt;a href='#erecorddeclaration'&gt;RecordDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#numerictype","title":"NumericType","text":"<p>Labels:Node Type ObjectType NumericType </p>"},{"location":"CPG/specs/schema/#children_14","title":"Children","text":"<p>IntegerType FloatingPointType BooleanType </p>"},{"location":"CPG/specs/schema/#relationships_75","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#integertype","title":"IntegerType","text":"<p>Labels:Node Type ObjectType NumericType IntegerType </p>"},{"location":"CPG/specs/schema/#relationships_76","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#floatingpointtype","title":"FloatingPointType","text":"<p>Labels:Node Type ObjectType NumericType FloatingPointType </p>"},{"location":"CPG/specs/schema/#relationships_77","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#booleantype","title":"BooleanType","text":"<p>Labels:Node Type ObjectType NumericType BooleanType </p>"},{"location":"CPG/specs/schema/#relationships_78","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#stringtype","title":"StringType","text":"<p>Labels:Node Type ObjectType StringType </p>"},{"location":"CPG/specs/schema/#relationships_79","title":"Relationships","text":"<p>GENERICS RECORD_DECLARATION SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#parameterizedtype","title":"ParameterizedType","text":"<p>Labels:Node Type ParameterizedType </p>"},{"location":"CPG/specs/schema/#relationships_80","title":"Relationships","text":"<p>SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#pointertype","title":"PointerType","text":"<p>Labels:Node Type PointerType </p>"},{"location":"CPG/specs/schema/#relationships_81","title":"Relationships","text":"<p>ELEMENT_TYPE SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#element_type","title":"ELEMENT_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nPointerType--\"ELEMENT_TYPE\u00b9\"--&gt;PointerTypeELEMENT_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#functionpointertype","title":"FunctionPointerType","text":"<p>Labels:Node Type FunctionPointerType </p>"},{"location":"CPG/specs/schema/#relationships_82","title":"Relationships","text":"<p>PARAMETERS RETURN_TYPE SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#parameters_2","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionPointerType--\"PARAMETERS*\"--&gt;FunctionPointerTypePARAMETERS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#return_type","title":"RETURN_TYPE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionPointerType--\"RETURN_TYPE\u00b9\"--&gt;FunctionPointerTypeRETURN_TYPE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#tupletype","title":"TupleType","text":"<p>Labels:Node Type TupleType </p>"},{"location":"CPG/specs/schema/#relationships_83","title":"Relationships","text":"<p>TYPES SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#types","title":"TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nTupleType--\"TYPES*\"--&gt;TupleTypeTYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#incompletetype","title":"IncompleteType","text":"<p>Labels:Node Type IncompleteType </p>"},{"location":"CPG/specs/schema/#relationships_84","title":"Relationships","text":"<p>SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#referencetype","title":"ReferenceType","text":"<p>Labels:Node Type ReferenceType </p>"},{"location":"CPG/specs/schema/#relationships_85","title":"Relationships","text":"<p>REFERENCE SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#reference","title":"REFERENCE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nReferenceType--\"REFERENCE\u00b9\"--&gt;ReferenceTypeREFERENCE[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#functiontype","title":"FunctionType","text":"<p>Labels:Node Type FunctionType </p>"},{"location":"CPG/specs/schema/#relationships_86","title":"Relationships","text":"<p>RETURN_TYPES PARAMETERS SUPER_TYPE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#return_types_1","title":"RETURN_TYPES","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionType--\"RETURN_TYPES*\"--&gt;FunctionTypeRETURN_TYPES[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#parameters_3","title":"PARAMETERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nFunctionType--\"PARAMETERS*\"--&gt;FunctionTypePARAMETERS[&lt;a href='#etype'&gt;Type&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#annotationmember","title":"AnnotationMember","text":"<p>Labels:Node AnnotationMember </p>"},{"location":"CPG/specs/schema/#relationships_87","title":"Relationships","text":"<p>VALUE DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#value_1","title":"VALUE","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAnnotationMember--\"VALUE\u00b9\"--&gt;AnnotationMemberVALUE[&lt;a href='#eexpression'&gt;Expression&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#component","title":"Component","text":"<p>Labels:Node Component </p>"},{"location":"CPG/specs/schema/#relationships_88","title":"Relationships","text":"<p>OUTGOING_INTERACTIONS INCOMING_INTERACTIONS TRANSLATION_UNITS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#outgoing_interactions","title":"OUTGOING_INTERACTIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"OUTGOING_INTERACTIONS*\"--&gt;ComponentOUTGOING_INTERACTIONS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#incoming_interactions","title":"INCOMING_INTERACTIONS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"INCOMING_INTERACTIONS*\"--&gt;ComponentINCOMING_INTERACTIONS[&lt;a href='#enode'&gt;Node&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#translation_units","title":"TRANSLATION_UNITS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nComponent--\"TRANSLATION_UNITS*\"--&gt;ComponentTRANSLATION_UNITS[&lt;a href='#etranslationunitdeclaration'&gt;TranslationUnitDeclaration&lt;/a&gt;]:::outer</code></pre>"},{"location":"CPG/specs/schema/#annotation","title":"Annotation","text":"<p>Labels:Node Annotation </p>"},{"location":"CPG/specs/schema/#relationships_89","title":"Relationships","text":"<p>MEMBERS DFG EOG ANNOTATIONS AST SCOPE TYPEDEFS </p>"},{"location":"CPG/specs/schema/#members","title":"MEMBERS","text":"<pre><code>flowchart LR\n  classDef outer fill:#fff,stroke:#ddd,stroke-dasharray:5 5;  classDef special fill:#afa,stroke:#5a5,stroke-dasharray:5 5;\nAnnotation--\"MEMBERS*\"--&gt;AnnotationMEMBERS[&lt;a href='#eannotationmember'&gt;AnnotationMember&lt;/a&gt;]:::outer</code></pre>"},{"location":"Contributing/","title":"Contributing","text":""},{"location":"Contributing/#prerequsites","title":"Prerequsites","text":"<ul> <li>git</li> <li>Java 17 (OpenSDK)</li> </ul>"},{"location":"Contributing/#build-and-run","title":"Build and Run","text":""},{"location":"Contributing/#getting-the-source","title":"Getting the source","text":"<p>First, create a fork of this repository and clone the fork:</p> <pre><code>git clone https://github.com/&lt;&lt;&lt;your-github-account&gt;&gt;&gt;/TODO.git\n</code></pre> <p>Add the upstream repository as a second remote, so you can incorporate upstream changes into your fork:</p> <pre><code>git remote add upstream https://github.com/Fraunhofer-AISEC/cpg.git\n</code></pre>"},{"location":"Contributing/#build","title":"Build","text":"<p>Make sure you can build the repository</p> <pre><code>./gradlew clean spotlessApply build publishToMavenLocal\n</code></pre> <p>This project requires Java 17. If Java 17 is not your default Java version, make sure to configure gradle to use it by setting its java.home variable:</p> <pre><code>./gradlew -Dorg.gradle.java.home=\"/usr/lib/jvm/java-17-openjdk-amd64/\" build\n</code></pre>"},{"location":"Contributing/#copyright-notice","title":"Copyright Notice","text":"<p>This project has the convention of including a license notice header in all source files: <pre><code>/*\n * Copyright (c) 2020, Fraunhofer AISEC. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *                    $$$$$$\\  $$$$$$$\\   $$$$$$\\\n *                   $$  __$$\\ $$  __$$\\ $$  __$$\\\n *                   $$ /  \\__|$$ |  $$ |$$ /  \\__|\n *                   $$ |      $$$$$$$  |$$ |$$$$\\\n *                   $$ |      $$  ____/ $$ |\\_$$ |\n *                   $$ |  $$\\ $$ |      $$ |  $$ |\n *                   \\$$$$$   |$$ |      \\$$$$$   |\n *                    \\______/ \\__|       \\______/\n *\n */\n</code></pre></p> <p>If you are using IntelliJ IDEA, you can import <code>style/copyright.xml</code> as a copyright profile to automate the header creation process. Click here for further information on copyright profiles.</p>"},{"location":"Contributing/#code-guidelines","title":"Code Guidelines","text":"<p>Most of our code is written in Kotlin and if you develop new nodes, one should follow the following guidelines.</p>"},{"location":"Contributing/#property-edges","title":"Property Edges","text":"<p>On some edges, we want to store additional information (e.g., if a <code>EOG</code> node is \"unreachable\"). In this case, a simple list of nodes for a <code>@Relationship</code> is not enough and instead a list of <code>PropertyEdge</code> objects is needed. To have a consistent naming, the property holding the edges should be named the singular of the property name + \"Edges\", e.g. <code>parameterEdges</code>. To make it more convenient for users to also access the connected nodes without property edges, the Kotlin delegation feature, with a <code>PropertyEdgeDelegate</code> can be used. This property should then be named after the property (plural), e.g. <code>parameters</code>.</p> <pre><code>/** The list of function parameters. */\n@Relationship(value = \"PARAMETERS\", direction = Relationship.Direction.OUTGOING)\n@field:SubGraph(\"AST\")\nvar parameterEdges = mutableListOf&lt;PropertyEdge&lt;ParamVariableDeclaration&gt;&gt;()\n/** Virtual property for accessing [parameterEdges] without property edges. */\nvar parameters by PropertyEdgeDelegate(FunctionDeclaration::parameterEdges)\n</code></pre> <p>Note: We actually want list property to be immutable so that they can only be modified by the node class itself. However, it is currently not possible to have them immutable on the public getter, but mutable for the class itself. There is a Kotlin issue tracking this feature request. Once https://youtrack.jetbrains.com/issue/KT-14663 is resolved, we should set the public type for all those lists to <code>List</code> instead of <code>MutableList</code>. Properties delegated by <code>PropertyEdgeDelegate</code> are already immutable.</p>"},{"location":"Contributing/#required-properties","title":"Required Properties","text":"<p>Properties which can be considered as a required part of an expression, should be non-nullable and be initialized to a <code>ProblemNode</code>. In this case we can represent parsing problems in the graph and still avoid too many null checks. For example in the <code>MemberExpression</code>: <pre><code>var base: Expression = ProblemExpression(\"could not parse base expression\")\n</code></pre></p> <p>There might be cases, where either one or the other property might be required (if a property can either be an <code>Expression</code> or a <code>Declaration</code>, in this case we need to resort of having both properties nullable.</p> <p>Note: In the future, we might move required properties into the constructor of a node. </p>"},{"location":"Contributing/#equals-and-hashcode","title":"<code>equals</code> and <code>hashCode</code>","text":"<p>Because of the special nature of the <code>PropertyEdge</code>, one needs to be careful in comparing them in <code>equals</code>, to avoid stack overflows. Therefore, the special function <code>propertyEqualsList</code> needs to be used: <pre><code>return (super.equals(other) &amp;&amp;\nparameters == other.parameters &amp;&amp;\npropertyEqualsList(parameterEdges, other.parameterEdges)\n</code></pre></p> <p><code>hashCode</code> needs to include all properties that are also compared in <code>equals</code>. For easier readability, we should use the Kotlin expression body feature: <pre><code>override fun hashCode() = Objects.hash(super.hashCode(), constructor, arguments)\n</code></pre></p>"},{"location":"Contributing/#pull-requests","title":"Pull Requests","text":"<p>Before we can accept a pull request from you, you'll need to sign a Contributor License Agreement (CLA). It is an automated process and you only need to do it once.</p> <p> We are currently discussing the implementation of a Contributor License Agreement (CLA). Unfortunately, we cannot merge external pull requests until this issue is resolved. </p> <p>To enable us to quickly review and accept your pull requests, always create one pull request per issue and link the issue in the pull request. Never merge multiple requests in one unless they have the same root cause. Be sure your code is formatted correctly using the respective formatting task. Keep code changes as small as possible.  Pull requests should contain tests whenever possible.</p>"},{"location":"Contributing/#change-log","title":"Change-Log","text":"<p>Every PR that changes the graph or interaction with one of the classes that run the analysis has to be documented in the changelog. For this, one should add the appropriated change type (added, changed, removed) under the heading of the thematic change (Graph-changes, Interface-changes). Fixes for specific issues should also be mentioned but their inclusion in the release changelog is optional. An example of a PR-changelog:</p>"},{"location":"Contributing/#graph-changes","title":"Graph-changes","text":""},{"location":"Contributing/#added","title":"Added","text":"<ul> <li>New node <code>A</code> with edges of name <code>B</code> and <code>C</code> to its ast-children.</li> </ul>"},{"location":"Contributing/#changed","title":"Changed","text":"<ul> <li>Property of Node <code>A</code> that describes the name changed from <code>name</code> to <code>simple-name</code>.</li> </ul>"},{"location":"Contributing/#interface-changes","title":"Interface-changes","text":""},{"location":"Contributing/#added_1","title":"Added","text":"<ul> <li>function <code>loadIncludes</code> which persists nodes to the graph comming from in-file includes.</li> </ul>"},{"location":"Contributing/#language","title":"Language","text":"<p>Please stick to English for all discussions and comments. This helps to make the project accessible for a larger audience.</p>"},{"location":"Contributing/#publishing","title":"Publishing","text":"<p>To publish a release, push a tag that contains the version number beginning with <code>v</code>, i.e. <code>v2.0.0</code>. The GitHub Actions workflow will then automatically build a release zip and create a GitHub release. Afterwards it would be good to adjust the release text to include a minimal changelog.</p>"},{"location":"Contributing/#versioning","title":"Versioning","text":"<p>The versioning number is split up in major, minor and bugfix releases: <code>major.minor.bugfix</code>. Most releases will have the form <code>major.minor.0</code>, and bugfixes will be either included in a future version, and the bugfix release number will only be used to ship bug fixes for older versions when necessary.</p>"},{"location":"GettingStarted/","title":"Getting Started","text":"<p>After installing the library, it can be used in different ways:</p> <ul> <li>As a library for Kotlin/Java</li> <li>Via an interactive command line interface</li> <li>With custom automated analyses using the Query API</li> </ul> <p>In all these cases, the Shortcuts provide you a convenient way to quickly explore some of the most relevant information.</p>"},{"location":"GettingStarted/cli/","title":"The Interactive CLI","text":"<p>If you want to explore the graph from the command line, we provide an interactive interface for this.</p> <p>To build the interface from source, simply type <code>./gradlew :cpg-console:installDist</code> from the root of the repository. You can then start the CLI with <code>cpg-console/build/install/cpg-console/bin/cpg-console</code>.</p> <p>The CLI comes with only few basic commands: * <code>:tr &lt;path&gt;</code> or <code>:translate &lt;path&gt;</code> translates the file(s) under the given   path. * <code>:c &lt;node&gt;</code> or <code>:code &lt;node&gt;</code> prints the code of the given node * <code>:e neo4j &lt;username&gt; &lt;password&gt;</code> exports the graph to neo4j * <code>:translateCompilationDatabase &lt;path&gt;</code> or <code>:trdb &lt;path&gt;</code> translates the source   code files using the provided compilation database into the CPG * <code>:r</code> or <code>:run</code> runs two pre-defined analyzers: a null pointer check or an   out-of-bounds check * <code>:help</code> prints a help text with available commands * <code>:q</code> quits the session</p> <p>After translating a file/project, the translation result will be kept in <code>result</code>. You can now explore all edges and nodes in the graph as in any kotlin project. You can also use the shortcuts or the analyses provided by the Query API.</p> <p>Example: <pre><code>[0] :tr  cpg-analysis/src/test/resources/value_evaluation/size.java\n...\n[10] val mainFun = result.functions[\"main\"]\n[20] :code mainFun!!\n2: public static void main(String[] args) {\n3:         int[] array = new int[3];\n4:         for(int i = 0; i &lt; array.length; i++) {\n5:             array[i] = i;\n6:         }\n7:         System.out.println(array[1]);\n8:\n9:         String str = \"abcde\";\n10:         System.out.println(str);\n11:         return 0;\n12:     }\n[21] sizeof(mainFun.calls[\"println\"]!!.arguments[0]).value\nres21: Int = 3\n[22] :q\nBye!\n</code></pre></p>"},{"location":"GettingStarted/installation/","title":"Installing the CPG library","text":"<p>You can install the library from pre-built releases or build it from the source code.</p>"},{"location":"GettingStarted/installation/#get-pre-built-releases","title":"Get Pre-Built Releases","text":"<p>You can find the releases in our github repository or on maven.</p>"},{"location":"GettingStarted/installation/#building-from-source","title":"Building from Source","text":"<ol> <li>Clone the repository from GitHub with <code>git clone git@github.com:Fraunhofer-AISEC/cpg.git</code>.</li> <li>Generate a <code>gradle.properties</code> file locally. We provide a sample file    here    or you can use the <code>configure_frontends.sh</code> scripts to generate the file.</li> <li>Build the project using <code>./gradlew build</code> or install it with    <code>./gradlew installDist</code>. You could also build selected submodules.</li> </ol>"},{"location":"GettingStarted/library/","title":"Usage as library","text":"<p>You can use the CPG library in your kotlin project.</p>"},{"location":"GettingStarted/library/#1-add-the-cpg-library-to-your-dependencies","title":"1. Add the CPG library to your dependencies","text":"<p>First, get the required dependencies, e.g. by installing either the whole project or selected submodules from mavencentral. Here's an excerpt from a <code>build.gradle.kts</code> file: <pre><code>...\nrepositories {\nmavenCentral()\n...\n}\ndependencies {\nimplementation(\"de.fraunhofer.aisec:cpg:6.2.1\") // Install everything\n// OR\nimplementation(\"de.fraunhofer.aisec:cpg-core:6.2.1\") // Only cpg-core\nimplementation(\"de.fraunhofer.aisec:cpg-language-java:6.2.1\") // Only the java language frontend\n...\n}\n</code></pre></p>"},{"location":"GettingStarted/library/#2-configuring-the-translation","title":"2. Configuring the translation","text":"<p>Before constructing the CPG, you have to configure how you want to translate the code to the CPG. You have to use the <code>TranslationConfiguration</code> and the <code>InferenceConfiguration</code>. It allows you to specify which frontends, and passes you want to use and can steer some analyses. </p> <p>The following lines give you a small example: <pre><code>val inferenceConfig = InferenceConfiguration\n.builder()\n.guessCastExpressions(true)\n.inferRecords(true)\n.inferDfgForUnresolvedCalls(true)\n.build()\nval translationConfig = TranslationConfiguration\n.builder()\n.inferenceConfiguration(inferenceConfig)\n.defaultPasses()\n.registerPass&lt;MyCustomPass&gt;()\n.registerFrontend&lt;MyFrontend&gt;()\n.sourceLocations(filePaths)\n.build()\n</code></pre></p> <p>For a complete list of available methods, please check the KDoc.</p>"},{"location":"GettingStarted/library/#3-running-the-analysis","title":"3. Running the analysis","text":"<p>Now it's time to get the CPG. All you have to do is to run the analysis with the given configuration. <pre><code>val translationResult = TranslationManager\n.builder()\n.config(translationConfig)\n.build()\n.analyze()\n.get()\n</code></pre></p> <p>The CPG is available in the <code>translationResult</code>. You can now run analyses or explore the graph.</p>"},{"location":"GettingStarted/query/","title":"The Query API","text":"<p>The Query API serves as an easy-to-use interface to explore the graph and check if certain properties hold. This allows you to assemble a set of queries that you can use to identify bugs or vulnerabilities in the code under analysis. You can use a number of operations that you know from arithmetics, logics and many programming languages.</p> <p>The Query API provides a way validate if nodes in the graph fulfil certain requirements. It is a mixture of typical logical expressions (e.g. and, or, xor, implies), quantors (e.g. forall, exists), comparisons (e.g. &lt;, &gt;, ==, !=), some special operations (e.g., <code>in</code> to check for collections or <code>is</code> for types) and a couple of operations.</p>"},{"location":"GettingStarted/query/#operation-modes","title":"Operation modes","text":"<p>The Query API has two modes of operations which determine the depth of the output:</p> <ol> <li>The detailed mode reasons about every single step performed to check if the    query is fulfilled.</li> <li>The less detailed mode only provides the final output (true, false) and the    nodes which serve as input.</li> </ol> <p>To use the detailed mode, it is necessary to use specific operators in a textual representation whereas the other modes relies on the operators as known from any programming language.</p> <p>The following example output from the test case <code>testMemcpyTooLargeQuery2</code> shows the difference:</p> <p>Less detailed: <pre><code>[CallExpression[name=memcpy,location=vulnerable.cpp(3:5-3:38),type=UNKNOWN,base=&lt;null&gt;]]\n</code></pre></p> <p>Detailed mode: <pre><code>all (==&gt; false)\n--------\n    Starting at CallExpression[name=memcpy,location=vulnerable.cpp(3:5-3:38),type=UNKNOWN,base=&lt;null&gt;]: 5 &gt; 11 (==&gt; false)\n------------------------\n        sizeof(DeclaredReferenceExpression[DeclaredReferenceExpression[name=array,location=vulnerable.cpp(3:12-3:17),type=PointerType[name=char[]]],refersTo=VariableDeclaration[name=array,location=vulnerable.cpp(2:10-2:28),initializer=Literal[location=vulnerable.cpp(2:21-2:28),type=PointerType[name=char[]],value=hello]]]) (==&gt; 5)\n----------------------------------------\n------------------------\n        sizeof(Literal[location=vulnerable.cpp(3:19-3:32),type=PointerType[name=char[]],value=Hello world]) (==&gt; 11)\n----------------------------------------\n------------------------\n--------\n</code></pre></p>"},{"location":"GettingStarted/query/#operators-of-the-detailed-mode","title":"Operators of the detailed mode","text":"<p>Numerous methods allow to evaluate the queries while keeping track of all the steps. Currently, the following operations are supported:</p> <ul> <li>eq: Equality of two values.</li> <li>ne: Inequality of two values.</li> <li>IN: Checks if a value is contained in a [Collection]</li> <li>IS: Checks if a value implements a type ([Class]).</li> </ul> <p>Additionally, some functions are available only for certain types of values.</p> <p>For boolean values:</p> <ul> <li>and: Logical and operation (&amp;&amp;)</li> <li>or: Logical or operation (||)</li> <li>xor: Logical exclusive or operation (xor)</li> <li>implies: Logical implication</li> </ul> <p>For numeric values:</p> <ul> <li>gt: Grater than (&gt;)</li> <li>ge: Grater than or equal (&gt;=)</li> <li>lt: Less than (&lt;)</li> <li>le: Less than or equal (&lt;=)</li> </ul> <p>Note: The detailed mode and its operators require the user to take care of the correct order. I.e., the user has to put the brackets!</p>"},{"location":"GettingStarted/query/#operators-of-the-less-detailed-mode","title":"Operators of the less detailed mode","text":"<p>Numerous methods allow to evaluate the queries:</p> <ul> <li>==: Equality of two values.</li> <li>!=: Inequality of two values.</li> <li>in : Checks if a value is contained in a [Collection]. The value of a   query tree has to be accessed by the property <code>value</code>.</li> <li>is: Checks if a value implements a type ([Class]). The value of a query   tree has to be accessed by the property <code>value</code>.</li> <li>&amp;&amp;: Logical and operation</li> <li>||: Logical or operation</li> <li>xor: Logical exclusive or operation</li> <li>&gt;: Grater than</li> <li>&gt;=: Grater than or equal</li> <li>&lt;: Less than</li> <li>&lt;=: Less than or equal</li> </ul>"},{"location":"GettingStarted/query/#functions-of-the-query-api","title":"Functions of the Query API","text":"<p>Since these operators cannot cover all interesting values, we provide an initial set of analyses and functions to use them. These are:</p> <ul> <li>min(n: Node): Minimal value of a node</li> <li>max(n: Node): Maximal value of a node</li> <li>sizeof(n: Node): The length of an array or string</li> <li>dataFlow(from: Node, to: Node): Checks if a data flow is possible between   the nodes <code>from</code> as a source and <code>to</code> as sink.</li> <li>executionPath(from: Node, to: Node): Checks if a path of execution flow is   possible between the nodes <code>from</code> and <code>to</code>.</li> <li>executionPath(from: Node, predicate: (Node) -&gt; Boolean): Checks if a path   of execution flow is possible starting at node <code>from</code> and fulfilling the   requirement specified in <code>predicate</code>.</li> </ul>"},{"location":"GettingStarted/query/#running-a-query","title":"Running a query","text":"<p>The query can use any of these operators and functions and additionally operate on the fields of a node. To simplify the generation of queries, we provide an initial set of extensions for certain nodes.</p> <p>An example for such a query could look as follows for the detailed mode: <pre><code>val memcpyTooLargeQuery = { node: CallExpression -&gt;\nsizeof(node.arguments[0]) gt sizeof(node.arguments[1])\n}\n</code></pre></p> <p>The same query in the less detailed mode: <pre><code>val memcpyTooLargeQuery = { node: CallExpression -&gt;\nsizeof(node.arguments[0]) &gt; sizeof(node.arguments[1])\n}\n</code></pre></p> <p>After assembling a query of the respective operators and functions, we want to run it for a subset of nodes in the graph. We therefore provide two operators: <code>all</code> (or <code>allExtended</code> for the detailed output) and <code>exists</code> (or <code>existsExtended</code> for the detailed output). Both are used in a similar way. They enable the user to optionally specify conditions to determine on which nodes we want to run a query (e.g., only on <code>CallExpression</code>s which call a function called \"memcpy\").</p> <p>The following snippets use the queries from above to run them on all calls of the function \"memcpy\" contained in the <code>TranslationResult</code> <code>result</code>: <pre><code>val queryTreeResult =\nresult.allExtended&lt;CallExpression&gt;(\n{ it.name == \"memcpy\" },\n{ sizeof(it.arguments[0]) gt sizeof(it.arguments[1]) }\n)\n</code></pre></p> <p>Less detailled: <pre><code>val queryTreeResult =\nresult.all&lt;CallExpression&gt;(\n{ it.name == \"memcpy\" },\n{ sizeof(it.arguments[0]) &gt; sizeof(it.arguments[1]) }\n)\n</code></pre></p>"},{"location":"GettingStarted/shortcuts/","title":"Shortcuts to Explore the Graph","text":"<p>When analyzing software, there are some information which are interesting to explore. To facilitate accessing the information even without in-depth knowledge about the graph and the graph model, we provide a number of shortcuts which can be used on all nodes to find the nodes you're looking for.</p> <p>All you have to do to use this functionality is to add the <code>import de.fraunhofer.aisec.cpg.graph.*</code>.</p>"},{"location":"GettingStarted/shortcuts/#ast-subtree-traversal","title":"AST subtree traversal","text":"<p>It is often useful to find nodes which are in the AST subtree of another node. We provide the following shortcuts to gain a quick overview of relevant types of nodes:</p> <p>Starting from node <code>n</code>... * ...get all function/method calls with <code>n.calls</code> * ...get all member calls (i.e., calls which are called on an object or class)   with <code>n.mcalls</code> * ...get all method declarations with <code>n.methods</code> * ...get all function (and method) declarations with <code>n.functions</code> * ...get all field declarations with <code>n.fields</code> * ...get all parameters with <code>n.parameters</code> * ...get all record declarations (e.g. classes, structs) with <code>n.records</code> * ...get all namespaces with <code>n.namespaces</code> * ...get all variables with <code>n.variables</code> * ...get all literals with <code>n.literals</code> * ...get all references to variables, fields, functions, etc. with <code>n.refs</code> * ...get all assignments with <code>n.assignments</code></p>"},{"location":"GettingStarted/shortcuts/#filtering-the-results","title":"Filtering the results","text":"<p>The lists you get here can be quite long and it's a good idea to filter them. To do so, we provide different operators: * To retrieve a single element, you can use the <code>[]</code> (get) operator and specify   your criterion inside the brackets. * To retrieve a single element and get an exception if there are multiple   options, add the <code>SearchModifiers.UNIQUE</code> to the query. * To retrieve a list of nodes, you can use the <code>()</code> (invokes) operator to   specify your criterion.</p> <p>Both notations allow you to quickly filter for the name by providing the respective string or by accessing the fields and writing conditions on them.</p> <p>Examples: <pre><code>import de.fraunhofer.aisec.cpg.graph.*\n// returns the first variable in the graph which has the name \"a\"\nvar a = result.variables[\"a\"]\n// returns the only variable with the name \"a\" or an exception otherwise\nvar theOnlyA = result.variables[\"a\", SearchModifiers.UNIQUE]\n// returns the first variable in the graph which does have an initialiser\nvar anyWithInitializer = result.variables[{ it.initializer != null }]\n// returns the only variable in the graph which does not have an initialiser or throws an exception\nvar uniqueWithInitializer = result.variables[{ it.initializer != null }, SearchModifiers.UNIQUE]\n// returns a list of all VariableDeclarations in the graph with the name \"a\"\nvar aList = result.variables(\"a\")\n// returns a list of FunctionDeclarations that have no parameter\nvar noArgs = result.functions { it.parameters.isEmpty() }\n</code></pre></p>"},{"location":"GettingStarted/shortcuts/#more-information-needed","title":"More information needed?","text":"<p>In some cases, the AST-based traversals won't suffice to filter the nodes that you're interested in. For this reason, there are a number of additional methods which search for other patterns in the graph. Note that these are often less stable than the information from above!</p> <ul> <li>The size of an array is evaluated using   <code>ArraySubscriptionExpression.arraySize</code>. Unfortunately, this only works if the   size is given in the initialization. Updates are not considered.</li> <li>Control dependencies are currently available via the extensions   <code>Node.controlledBy()</code> and <code>IfStatement.controls()</code>.</li> <li><code>Node.eogDistanceTo(to: Node)</code> calculates the number of EOG edges between    this node and <code>to</code>.</li> <li><code>FunctionDeclaration.get(n: Int)</code>: Returns the n-th statement of the body of   this function.</li> <li><code>FunctionDeclaration.callees</code>: Returns the functions which are called from   this function.</li> <li><code>TranslationResult.callersOf(function: FunctionDeclaration)</code> determines which   functions call the specified function.</li> <li><code>Node.followPrevDFG(predicate: (Node) -&gt; Boolean)</code> returns a list of nodes   which form a path between this node and the first node (as a start of the   dataflow) matching the predicate. Note that this flow might not occur on   runtime!.</li> <li><code>Node.followPrevEOG(predicate: (Node) -&gt; Boolean)</code>   and <code>Node.followNextEOG(predicate: (Node) -&gt; Boolean)</code> return a list of edges   which form an EOG path between this node and the first node matching the   predicate. Note that this flow might not happen on runtime!</li> <li>The methods <code>Node.followPrevDFGEdgesUntilHit(predicate: (Node) -&gt; Boolean)</code>,  <code>Node.followNextDFGEdgesUntilHit(predicate: (Node) -&gt; Boolean)</code>,  <code>Node.followPrevEOGEdgesUntilHit(predicate: (Node) -&gt; Boolean)</code>, and  <code>Node.followNextGEdgesUntilHit(predicate: (Node) -&gt; Boolean)</code> work in a similar   way but return all failed and all fulfilled paths. This allows reasoning more   precisely about the program's behavior.</li> </ul>"}]}
/*
 * Copyright (c) 2025, Fraunhofer AISEC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *                    $$$$$$\  $$$$$$$\   $$$$$$\
 *                   $$  __$$\ $$  __$$\ $$  __$$\
 *                   $$ /  \__|$$ |  $$ |$$ /  \__|
 *                   $$ |      $$$$$$$  |$$ |$$$$\
 *                   $$ |      $$  ____/ $$ |\_$$ |
 *                   $$ |  $$\ $$ |      $$ |  $$ |
 *                   \$$$$$   |$$ |      \$$$$$   |
 *                    \______/ \__|       \______/
 *
 */
package de.fraunhofer.aisec.cpg

import de.fraunhofer.aisec.cpg.SemanticNodeGenerator.autoGeneratedCodeText
import java.io.File
import java.io.FileWriter
import java.io.IOException
import org.jboss.forge.roaster.model.source.JavaClassSource

// Write java class files to filesystem
fun writeJavaClassesToFolder(jcs: List<JavaClassSource>, outputBase: String) {
    var filename: String
    for (jcsElem in jcs) {
        filename = outputBase + jcsElem.name + ".java"
        println(jcsElem.imports)

        // write to file
        val f = File(filename)
        val directory = f.parentFile
        if (!directory.exists()) {
            if (!directory.mkdirs()) {
                println("Could not create base directory for file $outputBase")
            }
        }
        try {
            val fileWriter = FileWriter(f)
            var outputText = ""
            outputText += autoGeneratedCodeText() + "\n\n"
            outputText += jcsElem.toString()
            fileWriter.write(outputText)
            fileWriter.close()
            println("File written to: $filename")
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }
}

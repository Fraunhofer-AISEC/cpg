package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.Duration
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String

public abstract class Logging(
  public val enabled: Boolean?,
  public val monitoringEnabled: Boolean?,
  name: String?,
  public val retentionPeriod: Duration?,
  public val securityAlertsEnabled: Boolean?,
  public val loggingService: LoggingService?,
  underlyingNode: Node?,
) : Auditing(underlyingNode) {
  init {
    this.name = Name(localName = name)
  }

  override fun equals(other: Any?): Boolean = other is Logging &&
              super.equals(other) &&
              other.enabled == this.enabled &&
              other.monitoringEnabled == this.monitoringEnabled &&
              other.name == this.name &&
              other.retentionPeriod == this.retentionPeriod &&
              other.securityAlertsEnabled == this.securityAlertsEnabled &&
              other.loggingService == this.loggingService

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              enabled,
              monitoringEnabled,
              name,
              retentionPeriod,
              securityAlertsEnabled,
              loggingService,
          )
}

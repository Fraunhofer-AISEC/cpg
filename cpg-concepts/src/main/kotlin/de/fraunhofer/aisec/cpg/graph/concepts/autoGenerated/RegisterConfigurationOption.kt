package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.Concept
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * Represents an operation to register a new [ConfigurationOption]. This is often done with a call,
 * such as `conf.registerOption(\"option\", \"defaultValue\")`. This might not be necessary for all
 * configuration frameworks, some might allow to directly read the group (via 
 * [RegisterConfigurationOption]) without registering it first, or it is done implicitly. When code and
 * configuration is interacting, we expect that the configuration file (such as an INI file) contains
 * the [ConfigurationOption] node and the code contains the [RegisterConfigurationOption] and
 * [ReadConfigurationOption] nodes.
 */
public abstract class RegisterConfigurationOption(
  public val configurationOption: ConfigurationOption?,
  linkedConcept: Configuration?,
  concept: Concept?,
  underlyingNode: Node?,
) : ConfigurationOperation(linkedConcept, concept, underlyingNode) {
  override fun equals(other: Any?): Boolean = other is RegisterConfigurationOption &&
              super.equals(other) &&
              other.configurationOption == this.configurationOption

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              configurationOption,
          )
}

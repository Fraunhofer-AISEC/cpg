package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

/**
 * Represents a policy that can be applied to a resource or a set of resources. Policies can contain
 * rules and operations that define how access to the resource is controlled.
 */
public abstract class Policy(
  public val context: Context,
  public val policyRules: MutableList<PolicyRule>,
  dataLocation: DataLocation,
  creation_time: ZonedDateTime,
  description: String,
  labels: MutableMap<String, String>,
  name: String,
  raw: String,
  parent: Resource,
  underlyingNode: Node,
) : Data(dataLocation, creation_time, description, labels, name, raw, parent, underlyingNode) {
  init {
    this.name = Name(localName = name)
  }

  override fun equals(other: Any?): Boolean = other is Policy &&
              super.equals(other) &&
              other.context == this.context &&
              other.policyRules == this.policyRules

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              context,
              policyRules,
          )
}

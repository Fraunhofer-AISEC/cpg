/*
 * Copyright (c) 2025, Fraunhofer AISEC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *                    $$$$$$\  $$$$$$$\   $$$$$$\
 *                   $$  __$$\ $$  __$$\ $$  __$$\
 *                   $$ /  \__|$$ |  $$ |$$ /  \__|
 *                   $$ |      $$$$$$$  |$$ |$$$$\
 *                   $$ |      $$  ____/ $$ |\_$$ |
 *                   $$ |  $$\ $$ |      $$ |  $$ |
 *                   \$$$$$   |$$ |      \$$$$$   |
 *                    \______/ \__|       \______/
 *
 */
package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * Represents an operation to register a new [ConfigurationGroup]. This is often done with a call,
 * such as `conf.registerGroup(\"group\")`. This might not be necessary for all configuration
 * frameworks, some might allow to directly read the group (via [ReadConfigurationGroup]) without
 * registering it first, or it is done implicitly. When code and configuration is interacting, we
 * expect that the configuration file (such as an INI file) contains the [ConfigurationGroup] node
 * and the code contains the [RegisterConfigurationGroup] and [ReadConfigurationGroup] nodes.
 */
public abstract class RegisterConfigurationGroup(
    public val configurationGroup: ConfigurationGroup?,
    linkedConcept: Configuration,
    underlyingNode: Node?,
) : ConfigurationOperation(linkedConcept, underlyingNode) {
    override fun equals(other: Any?): Boolean =
        other is RegisterConfigurationGroup &&
            super.equals(other) &&
            other.configurationGroup == this.configurationGroup

    override fun hashCode(): Int = Objects.hash(super.hashCode(), configurationGroup)
}

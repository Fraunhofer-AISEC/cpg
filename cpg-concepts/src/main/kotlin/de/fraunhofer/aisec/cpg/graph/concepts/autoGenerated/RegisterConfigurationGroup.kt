package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.Concept
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * Represents an operation to register a new [ConfigurationGroup]. This is often done with a call,
 * such as `conf.registerGroup(\"group\")`. This might not be necessary for all configuration
 * frameworks, some might allow to directly read the group (via [ReadConfigurationGroup]) without
 * registering it first, or it is done implicitly. When code and configuration is interacting, we
 * expect that the configuration file (such as an INI file) contains the [ConfigurationGroup] node and
 * the code contains the [RegisterConfigurationGroup] and [ReadConfigurationGroup] nodes.
 */
public abstract class RegisterConfigurationGroup(
  public val configurationGroup: ConfigurationGroup,
  linkedConcept: Configuration,
  concept: Concept,
  underlyingNode: Node,
) : ConfigurationOperation(linkedConcept, concept, underlyingNode) {
  override fun equals(other: Any?): Boolean = other is RegisterConfigurationGroup &&
              super.equals(other) &&
              other.configurationGroup == this.configurationGroup

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              configurationGroup,
          )
}

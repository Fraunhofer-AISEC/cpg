package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import java.time.Duration
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * RetentionPeriod in hours
 */
public abstract class Backup(
  public val enabled: Boolean,
  public val interval: Duration,
  public val retentionPeriod: Duration,
  public val storage: Storage,
  public val transportEncryption: Boolean,
  underlyingNode: Node,
) : Availability(underlyingNode) {
  override fun equals(other: Any?): Boolean = other is Backup &&
              super.equals(other) &&
              other.enabled == this.enabled &&
              other.interval == this.interval &&
              other.retentionPeriod == this.retentionPeriod &&
              other.storage == this.storage &&
              other.transportEncryption == this.transportEncryption

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              enabled,
              interval,
              retentionPeriod,
              storage,
              transportEncryption,
          )
}

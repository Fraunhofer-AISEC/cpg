package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * Represents a boundary in data processing, which can be used to define the scope of a policy or
 * the separation between different policies. For example, a boundary could be defined around an
 * [HttpEndpoint], so that the policy applies once data either comes in or goes out of the HTTP
 * endpoint.
 */
public abstract class Boundary(
  underlyingNode: Node?,
) : Functionality(underlyingNode) {
  override fun equals(other: Any?): Boolean = other is Boundary &&
              super.equals(other)

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
          )
}

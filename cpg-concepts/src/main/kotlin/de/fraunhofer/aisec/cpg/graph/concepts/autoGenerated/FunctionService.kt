package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.Short
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

public abstract class FunctionService(
  public val functions: MutableList<Function?>,
  ips: Array<String>?,
  ports: Array<Short>?,
  authenticity: Boolean?,
  computes: MutableList<Compute?>,
  serviceMetadataDocument: ServiceMetadataDocument?,
  transportEncryption: TransportEncryption?,
  internetAccessibleEndpoint: Boolean?,
  geoLocation: GeoLocation?,
  loggings: MutableList<Logging?>,
  redundancies: Redundancy?,
  usageStatistics: UsageStatistics?,
  creation_time: ZonedDateTime?,
  description: String?,
  labels: MutableMap<String, String>?,
  name: String?,
  raw: String?,
  parent: Resource?,
  underlyingNode: Node?,
) : NetworkService(ips, ports, authenticity, computes, serviceMetadataDocument, transportEncryption,
    internetAccessibleEndpoint, geoLocation, loggings, redundancies, usageStatistics, creation_time,
    description, labels, name, raw, parent, underlyingNode) {
  init {
    this.name = Name(localName = name)
  }

  override fun equals(other: Any?): Boolean = other is FunctionService &&
              super.equals(other) &&
              other.functions == this.functions

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              functions,
          )
}

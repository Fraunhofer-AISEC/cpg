package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String

/**
 * Via the Authenticity relationship, the access type can be specified, e.g. public access (no
 * authentication), password-based, etc.
 */
public abstract class HttpEndpoint(
  public val handler: String?,
  public val method: String?,
  public val path: String?,
  public val url: String?,
  public val authenticity: Authenticity?,
  public val authorization: Authorization?,
  public val httpRequestContext: HttpRequestContext?,
  public val proxyTarget: HttpEndpoint?,
  public val transportEncryption: TransportEncryption?,
  underlyingNode: Node?,
) : RemoteEntryPoint(underlyingNode) {
  override fun equals(other: Any?): Boolean = other is HttpEndpoint &&
              super.equals(other) &&
              other.handler == this.handler &&
              other.method == this.method &&
              other.path == this.path &&
              other.url == this.url &&
              other.authenticity == this.authenticity &&
              other.authorization == this.authorization &&
              other.httpRequestContext == this.httpRequestContext &&
              other.proxyTarget == this.proxyTarget &&
              other.transportEncryption == this.transportEncryption

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              handler,
              method,
              path,
              url,
              authenticity,
              authorization,
              httpRequestContext,
              proxyTarget,
              transportEncryption,
          )
}

package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

public abstract class Storage(
  public val activityLogging: ActivityLogging,
  public val atRestEncryption: Boolean,
  public val backups: MutableList<Backup>,
  public val immutability: Immutability,
  public val resourceLogging: ResourceLogging,
  internetAccessibleEndpoint: Boolean,
  geoLocation: GeoLocation,
  loggings: MutableList<Logging>,
  redundancies: Redundancy,
  usageStatistics: UsageStatistics,
  creation_time: ZonedDateTime,
  description: String,
  labels: MutableMap<String, String>,
  name: String,
  raw: String,
  parent: Resource,
  underlyingNode: Node,
) : Infrastructure(internetAccessibleEndpoint, geoLocation, loggings, redundancies, usageStatistics,
    creation_time, description, labels, name, raw, parent, underlyingNode) {
  init {
    this.name = Name(localName = name)
  }

  override fun equals(other: Any?): Boolean = other is Storage &&
              super.equals(other) &&
              other.activityLogging == this.activityLogging &&
              other.atRestEncryption == this.atRestEncryption &&
              other.backups == this.backups &&
              other.immutability == this.immutability &&
              other.resourceLogging == this.resourceLogging

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              activityLogging,
              atRestEncryption,
              backups,
              immutability,
              resourceLogging,
          )
}

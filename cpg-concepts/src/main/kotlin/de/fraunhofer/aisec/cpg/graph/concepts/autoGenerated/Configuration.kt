package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

/**
 * Represents the abstract concept of a \"configuration\". This is a common pattern in many
 * programming languages, where a data structure in code represents an aggregation of configuration
 * values. For example, in Python, the
 * [`configparser`](https://docs.python.org/3/library/configparser.html) module is used to read INI
 * files, and the config values are represented as a dictionary-like object. Often, the configuration
 * is loaded from multiple sources, such as INI files, environment variables, and command-line
 * arguments.
 */
public abstract class Configuration(
  public val configurationGroups: MutableList<ConfigurationGroup?>,
  dataLocation: DataLocation?,
  creation_time: ZonedDateTime?,
  description: String?,
  labels: MutableMap<String, String>?,
  name: String?,
  raw: String?,
  parent: Resource?,
  underlyingNode: Node?,
) : Data(dataLocation, creation_time, description, labels, name, raw, parent, underlyingNode) {
  init {
    this.name = Name(localName = name)
  }

  override fun equals(other: Any?): Boolean = other is Configuration &&
              super.equals(other) &&
              other.configurationGroups == this.configurationGroups

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              configurationGroups,
          )
}

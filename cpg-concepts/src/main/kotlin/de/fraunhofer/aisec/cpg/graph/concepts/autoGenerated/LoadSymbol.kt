package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import de.fraunhofer.aisec.cpg.graph.concepts.arch.OperatingSystemArchitecture
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * Represents an operation that loads a symbol during runtime. A common example would be a call
 * to`dlsym` in C/C++.
 */
public abstract class LoadSymbol(
  operatingSystemArchitecture: OperatingSystemArchitecture?,
  linkedConcept: Memory,
  underlyingNode: Node?,
) : DynamicLoadingOperation(operatingSystemArchitecture, linkedConcept, underlyingNode) {
  override fun equals(other: Any?): Boolean = other is LoadSymbol &&
              super.equals(other)

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
          )
}

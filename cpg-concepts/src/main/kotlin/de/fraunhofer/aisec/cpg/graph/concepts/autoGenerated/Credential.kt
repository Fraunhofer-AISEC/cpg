package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

/**
 * usedByMultiple: In which resources the credential is being used
 */
public abstract class Credential(
  public val enabled: Boolean?,
  public val expirationDate: ZonedDateTime?,
  public val isManaged: Boolean?,
  public val notBeforeDate: ZonedDateTime?,
  public val usedByMultiple: Infrastructure?,
  internetAccessibleEndpoint: Boolean?,
  geoLocation: GeoLocation?,
  loggings: MutableList<Logging?>,
  redundancies: Redundancy?,
  usageStatistics: UsageStatistics?,
  creation_time: ZonedDateTime?,
  description: String?,
  labels: MutableMap<String, String>?,
  name: String?,
  raw: String?,
  parent: Resource?,
  underlyingNode: Node?,
) : Infrastructure(internetAccessibleEndpoint, geoLocation, loggings, redundancies, usageStatistics,
    creation_time, description, labels, name, raw, parent, underlyingNode) {
  init {
    name?.let { this.name = Name(localName = it) }
  }

  override fun equals(other: Any?): Boolean = other is Credential &&
              super.equals(other) &&
              other.enabled == this.enabled &&
              other.expirationDate == this.expirationDate &&
              other.isManaged == this.isManaged &&
              other.notBeforeDate == this.notBeforeDate &&
              other.usedByMultiple == this.usedByMultiple

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              enabled,
              expirationDate,
              isManaged,
              notBeforeDate,
              usedByMultiple,
          )
}

package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Node
import java.time.Duration
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int

/**
 * analyzes the activity within a Compute resource
 */
public abstract class MalwareProtection(
  public val daysSinceActive: Duration?,
  public val enabled: Boolean?,
  public val numberOfThreatsFound: Int?,
  public val applicationLogging: ApplicationLogging?,
  underlyingNode: Node?,
) : Auditing(underlyingNode) {
  override fun equals(other: Any?): Boolean = other is MalwareProtection &&
              super.equals(other) &&
              other.daysSinceActive == this.daysSinceActive &&
              other.enabled == this.enabled &&
              other.numberOfThreatsFound == this.numberOfThreatsFound &&
              other.applicationLogging == this.applicationLogging

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              daysSinceActive,
              enabled,
              numberOfThreatsFound,
              applicationLogging,
          )
}

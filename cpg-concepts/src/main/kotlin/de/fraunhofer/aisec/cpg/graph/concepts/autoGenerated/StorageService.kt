package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import kotlin.Array
import kotlin.Boolean
import kotlin.Short
import kotlin.String
import kotlin.collections.MutableList
import kotlin.collections.MutableMap

/**
 * This entity represents a network-based service that can be used to access a particular storage
 * backend. It has multiple subclasses, e.g., for databases or object stores. It has a list of storage
 * resources associated to it.
 */
public abstract class StorageService(
  public val activityLogging: ActivityLogging,
  public val storage: MutableList<Storage>,
  ips: Array<String>,
  ports: Array<Short>,
  authenticity: Boolean,
  computes: MutableList<Compute>,
  serviceMetadataDocument: ServiceMetadataDocument,
  transportEncryption: TransportEncryption,
  internetAccessibleEndpoint: Boolean,
  geoLocation: GeoLocation,
  loggings: MutableList<Logging>,
  redundancies: Redundancy,
  usageStatistics: UsageStatistics,
  creation_time: ZonedDateTime,
  description: String,
  labels: MutableMap<String, String>,
  name: String,
  raw: String,
  parent: Resource,
  underlyingNode: Node,
) : NetworkService(ips, ports, authenticity, computes, serviceMetadataDocument, transportEncryption,
    internetAccessibleEndpoint, geoLocation, loggings, redundancies, usageStatistics, creation_time,
    description, labels, name, raw, parent, underlyingNode) {
  init {
    this.name = Name(localName = name)
  }
}

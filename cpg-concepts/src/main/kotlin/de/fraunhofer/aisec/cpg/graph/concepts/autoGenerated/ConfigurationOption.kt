package de.fraunhofer.aisec.cpg.graph.concepts.autoGenerated

import de.fraunhofer.aisec.cpg.graph.Name
import de.fraunhofer.aisec.cpg.graph.Node
import java.time.ZonedDateTime
import java.util.Objects
import kotlin.Any
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.collections.MutableMap

/**
 * Represents a configuration option within one [group]. Usually there is one option for each entry
 * in a configuration data structure.
 */
public abstract class ConfigurationOption(
  public val configurationGroup: ConfigurationGroup?,
  public val selectorKey: SelectorKey?,
  public val `value`: Value?,
  dataLocation: DataLocation?,
  creation_time: ZonedDateTime?,
  description: String?,
  labels: MutableMap<String, String>?,
  name: String?,
  raw: String?,
  parent: Resource?,
  underlyingNode: Node?,
) : Data(dataLocation, creation_time, description, labels, name, raw, parent, underlyingNode) {
  init {
    name?.let { this.name = Name(localName = it) }
  }

  override fun equals(other: Any?): Boolean = other is ConfigurationOption &&
              super.equals(other) &&
              other.configurationGroup == this.configurationGroup &&
              other.selectorKey == this.selectorKey &&
              other.value == this.value

  override fun hashCode(): Int = Objects.hash(
              super.hashCode(),
              configurationGroup,
              selectorKey,
              value,
          )
}

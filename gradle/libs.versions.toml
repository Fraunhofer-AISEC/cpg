[versions]
kotlin = "2.0.0"
kotlin19 = "1.9.10"
neo4j = "4.0.10"
log4j = "2.23.0"
sonarqube = "5.1.0.4882"
spotless = "6.25.0"
nexus-publish = "2.0.0"
sootup = "1.3.0"

[libraries]
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin"}
kotlin-script-runtime = { module = "org.jetbrains.kotlin:kotlin-script-runtime", version.ref = "kotlin19"}
kotlin-scripting-common = { module = "org.jetbrains.kotlin:kotlin-scripting-common", version.ref = "kotlin19"}
kotlin-scripting-jvm = { module = "org.jetbrains.kotlin:kotlin-scripting-jvm", version.ref = "kotlin19"}
kotlin-scripting-dependencies = { module = "org.jetbrains.kotlin:kotlin-scripting-dependencies", version.ref = "kotlin19"}
kotlin-scripting-dependencies-maven-all = { module = "org.jetbrains.kotlin:kotlin-scripting-dependencies-maven-all", version.ref = "kotlin19"}
kotlin-scripting-ide-services = { module = "org.jetbrains.kotlin:kotlin-scripting-ide-services", version.ref = "kotlin19"}
kotlin-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version = "1.8.0"}
kotlin-ki-shell = { module = "com.github.Kotlin:kotlin-interactive-shell", version = "5b1ff4d821"}
kotlin-test-junit5 = { module = "org.jetbrains.kotlin:kotlin-test-junit5", version.ref = "kotlin"}  # this is only needed for the testFixtures in cpg-core, everywhere else kotlin("test") is used

log4j-impl = { module = "org.apache.logging.log4j:log4j-slf4j2-impl", version.ref = "log4j" }
log4j-core = { module = "org.apache.logging.log4j:log4j-core", version.ref = "log4j" }

apache-commons-lang3 = { module = "org.apache.commons:commons-lang3", version = "3.15.0"}
neo4j-ogm-core = { module = "org.neo4j:neo4j-ogm-core", version.ref = "neo4j"}
neo4j-ogm-bolt-driver = { module = "org.neo4j:neo4j-ogm-bolt-driver", version.ref = "neo4j"}

javaparser = { module = "com.github.javaparser:javaparser-symbol-solver-core", version = "3.26.0"}
jackson = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version = "2.17.0"}
jacksonyml = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml", version = "2.17.0"}
eclipse-runtime = { module = "org.eclipse.platform:org.eclipse.core.runtime", version = "3.31.0"}
osgi-service = { module = "org.osgi:org.osgi.service.prefs", version = "1.1.2"}
icu4j = { module = "com.ibm.icu:icu4j", version = "75.1"}
# Note: This "module" intentionally looks very weird, because the CDT version is actually part of the path of the CDT external
# repository. In order to avoid updating the repository URL everytime a new CDT version comes out, we need to do this weird hack.
eclipse-cdt-core = { module = "11.5/cdt-11.5.0/plugins/org.eclipse.cdt:core", version = "8.4.0.202402110645"}
picocli = { module = "info.picocli:picocli", version = "4.7.0"}
picocli-codegen = { module = "info.picocli:picocli-codegen", version = "4.7.0"}
jep = { module = "black.ninia:jep", version = "4.2.0" }  # build.yml uses grep to extract the jep verison number for CI/CD purposes
llvm = { module = "org.bytedeco:llvm-platform", version = "16.0.4-1.5.9"}
jruby = { module = "org.jruby:jruby-core", version = "9.4.3.0" }
jline = { module = "org.jline:jline", version = "3.26.0" }
antlr-runtime = { module = "org.antlr:antlr4-runtime", version = "4.8-1" } # we cannot upgrade until ki-shell upgrades this!

sarif4k = { module = "io.github.detekt.sarif4k:sarif4k", version = "0.6.0"}

# test
junit-params = { module = "org.junit.jupiter:junit-jupiter-params", version = "5.10.0"}
mockito = { module = "org.mockito:mockito-core", version = "5.12.0"}

# plugins needed for build.gradle.kts in buildSrc
kotlin-gradle = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
dokka-gradle = { module = "org.jetbrains.dokka:dokka-gradle-plugin", version = "1.9.0" } # the dokka plugin is slightly behind the main Kotlin release cycle
dokka-versioning = { module = "org.jetbrains.dokka:versioning-plugin", version = "1.9.0"}
kover-gradle = { module = "org.jetbrains.kotlinx:kover-gradle-plugin", version = "0.8.0" }
sonarqube-gradle = { module = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin", version.ref = "sonarqube" }
spotless-gradle = { module = "com.diffplug.spotless:spotless-plugin-gradle", version.ref = "spotless" }
nexus-publish-gradle = { module = "io.github.gradle-nexus:publish-plugin", version.ref = "nexus-publish" }

sootup-core = { module = "org.soot-oss:sootup.core", version.ref = "sootup" }
sootup-java-core = { module = "org.soot-oss:sootup.java.core", version.ref = "sootup" }
sootup-java-sourcecode = { module = "org.soot-oss:sootup.java.sourcecode", version.ref = "sootup" }
sootup-java-bytecode = { module = "org.soot-oss:sootup.java.bytecode", version.ref = "sootup" }
sootup-jimple-parser = { module = "org.soot-oss:sootup.jimple.parser", version.ref = "sootup" }

[bundles]
log4j = ["log4j-impl", "log4j-core"]
neo4j = ["neo4j-ogm-core", "neo4j-ogm-bolt-driver"]
kotlin-scripting = [
    "kotlin-scripting-common",
    "kotlin-scripting-jvm",
    "kotlin-scripting-ide-services",
    "kotlin-scripting-dependencies",
    "kotlin-scripting-dependencies-maven-all",
]
sootup = ["sootup-core", "sootup-java-core", "sootup-java-sourcecode", "sootup-java-bytecode", "sootup-jimple-parser"]

[plugins]
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin"}
dokka = { id = "org.jetbrains.dokka", version.ref = "kotlin" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
node = { id = "com.github.node-gradle.node", version = "7.0.0"}

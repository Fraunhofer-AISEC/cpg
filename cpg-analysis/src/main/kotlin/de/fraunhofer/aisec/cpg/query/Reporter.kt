/*
 * Copyright (c) 2024, Fraunhofer AISEC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *                    $$$$$$\  $$$$$$$\   $$$$$$\
 *                   $$  __$$\ $$  __$$\ $$  __$$\
 *                   $$ /  \__|$$ |  $$ |$$ /  \__|
 *                   $$ |      $$$$$$$  |$$ |$$$$\
 *                   $$ |      $$  ____/ $$ |\_$$ |
 *                   $$ |  $$\ $$ |      $$ |  $$ |
 *                   \$$$$$   |$$ |      \$$$$$   |
 *                    \______/ \__|       \______/
 *
 */
package de.fraunhofer.aisec.cpg.query

import de.fraunhofer.aisec.cpg.query.Rule.Level
import java.nio.file.Path
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import kotlin.io.path.createDirectories
import kotlin.io.path.writeText

interface Reporter {
    /**
     * Generates a report for the given rule
     *
     * @param rules the rule to generate the report for. The query result of the rule must be set by
     *   calling [Rule.run] before calling this method
     * @param minify if true, a minified version of the report is generated
     * @return the report as a string that can be written to a file
     */
    fun report(rules: Collection<Rule>, minify: Boolean = false): String

    /**
     * Maps a level to the respective format
     *
     * @param level the level to map
     * @return the mapped level
     */
    fun mapLevel(level: Level): Any

    /**
     * Writes the report to a file
     *
     * @param report the report to write to a file. Should be generated by calling [report]
     * @param path the path to write the report to. If unspecified, the default path is used
     */
    fun toFile(report: String, path: Path = getDefaultPath()) {
        println("writing report to ${path.toAbsolutePath()}") // TODO: actual logging
        path.parent.createDirectories() // create parent directories if they don't exist
        path.writeText(report)
    }

    /**
     * Gets the default path to write the report to. Currently, the default path is
     * `$(pwd)/reports/report-<yyyy-MM-dd-HH-mm-ss>.sarif`
     *
     * @return the default path to write the report to
     */
    fun getDefaultPath(): Path {
        // TODO: duplicates technically possible if multiple reports are generated in the same
        // second
        // TODO: base path should be configurable
        // eg reports/sarif/report-2021-09-29-15-00-00.sarif
        val timestamp: String =
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss"))
        return Path.of("reports", "report-$timestamp.sarif")
    }
}

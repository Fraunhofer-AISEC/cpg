/*
 * Copyright (c) 2022, Fraunhofer AISEC. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *                    $$$$$$\  $$$$$$$\   $$$$$$\
 *                   $$  __$$\ $$  __$$\ $$  __$$\
 *                   $$ /  \__|$$ |  $$ |$$ /  \__|
 *                   $$ |      $$$$$$$  |$$ |$$$$\
 *                   $$ |      $$  ____/ $$ |\_$$ |
 *                   $$ |  $$\ $$ |      $$ |  $$ |
 *                   \$$$$$   |$$ |      \$$$$$   |
 *                    \______/ \__|       \______/
 *
 */
package de.fraunhofer.aisec.cpg.analysis.fsm

import de.fraunhofer.aisec.cpg.graph.Node

/**
 * Represents an edge of the automaton. The edge label consists of an operation (typically a method
 * name) and a base which allows us to differentiate between multiple objects.
 */
class Edge(
    val op: String,
    val base: String? = null,
    val nextState: State,
    private val nodeGetter: () -> Collection<Node> = {
        listOf()
    } // TODO: is a collection the correct type or should this be more specific (e.g., List<Node>)?
) {
    val correspondingNodes by lazy { nodeGetter() }
    fun matches(edge: Edge) = base == edge.base && op == edge.op

    override fun equals(other: Any?) =
        if (other is Edge)
            this.op == other.op && this.base == other.base && this.nextState == other.nextState
        else false

    override fun toString() =
        if (base != null) "-- $base.$op --> $nextState" else "-- $op --> $nextState"

    fun toDotLabel() = if (base != null) "$base.$op" else op

    fun copy(
        op: String = this.op,
        base: String? = this.base,
        nextState: State = this.nextState,
        nodeGetter: () -> Collection<Node> = { correspondingNodes }
    ) = Edge(op = op, base = base, nextState = nextState, nodeGetter = nodeGetter)

    /** Autogenerated by IntelliJ */
    override fun hashCode(): Int {
        var result = op.hashCode()
        result = 31 * result + (base?.hashCode() ?: 0)
        result = 31 * result + nextState.hashCode()
        return result
    }
}
